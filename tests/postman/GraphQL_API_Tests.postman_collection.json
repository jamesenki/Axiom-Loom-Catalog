{
  "info": {
    "name": "AI Predictive Maintenance Engine - GraphQL API",
    "description": "Comprehensive GraphQL API test suite with 1AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER% coverage including queries, mutations, subscriptions, and error handling scenarios",
    "version": "1.AUTOMOTIVE_MANUFACTURER.AUTOMOTIVE_MANUFACTURER",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.AUTOMOTIVE_MANUFACTURER/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set GraphQL endpoint",
          "pm.variables.set('graphql_endpoint', pm.variables.get('base_url') + '/graphql');",
          "",
          "// Common GraphQL request setup",
          "pm.request.headers.add({",
          "    key: 'Content-Type',",
          "    value: 'application/json'",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global GraphQL response validation",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
          "});",
          "",
          "pm.test('Response is valid JSON', function () {",
          "    pm.response.to.be.json;",
          "});",
          "",
          "pm.test('No GraphQL errors (unless expected)', function () {",
          "    const response = pm.response.json();",
          "    if (!pm.variables.get('expect_graphql_errors')) {",
          "        pm.expect(response).to.not.have.property('errors');",
          "    }",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "https://api.predictive-maintenance.com/v1",
      "type": "string"
    },
    {
      "key": "test_vehicle_id",
      "value": "TEST_VIN_123456789",
      "type": "string"
    },
    {
      "key": "test_fleet_id",
      "value": "TEST_FLEET_AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Introspection Query",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Schema introspection successful', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('__schema');",
                  "    pm.expect(response.data.__schema).to.have.property('types');",
                  "});",
                  "",
                  "pm.test('Required types are present', function () {",
                  "    const response = pm.response.json();",
                  "    const typeNames = response.data.__schema.types.map(type => type.name);",
                  "    pm.expect(typeNames).to.include('Vehicle');",
                  "    pm.expect(typeNames).to.include('Fleet');",
                  "    pm.expect(typeNames).to.include('DiagnosticData');",
                  "    pm.expect(typeNames).to.include('MaintenancePrediction');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query IntrospectionQuery { __schema { types { name kind description fields { name type { name kind ofType { name kind } } } } } }\"\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Vehicle Queries",
      "item": [
        {
          "name": "Get Vehicle by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Vehicle data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('vehicle');",
                  "    const vehicle = response.data.vehicle;",
                  "    pm.expect(vehicle).to.have.property('id');",
                  "    pm.expect(vehicle).to.have.property('vin');",
                  "    pm.expect(vehicle).to.have.property('make');",
                  "    pm.expect(vehicle).to.have.property('model');",
                  "    pm.expect(vehicle).to.have.property('healthStatus');",
                  "});",
                  "",
                  "pm.test('Health status fields are present', function () {",
                  "    const vehicle = pm.response.json().data.vehicle;",
                  "    pm.expect(vehicle.healthStatus).to.have.property('overallScore');",
                  "    pm.expect(vehicle.healthStatus).to.have.property('status');",
                  "    pm.expect(vehicle.healthStatus).to.have.property('lastUpdated');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetVehicle($id: ID!) { vehicle(id: $id) { id vin make model year engineType transmissionType fuelType status healthStatus { overallScore status lastUpdated components { name healthScore status trend lastCheck parameters { name value unit status normalRange { min max } } } } diagnosticCapabilities { obdVersion canBusSupported supportedProtocols } specifications { engineDisplacement horsepower fuelCapacity weight odometer } } }\",\n  \"variables\": {\n    \"id\": \"{{test_vehicle_id}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        },
        {
          "name": "Get Multiple Vehicles with Filtering",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Vehicles list is returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('vehicles');",
                  "    pm.expect(response.data.vehicles).to.have.property('nodes');",
                  "    pm.expect(response.data.vehicles).to.have.property('pageInfo');",
                  "    pm.expect(response.data.vehicles).to.have.property('totalCount');",
                  "});",
                  "",
                  "pm.test('Pagination info is valid', function () {",
                  "    const pageInfo = pm.response.json().data.vehicles.pageInfo;",
                  "    pm.expect(pageInfo).to.have.property('hasNextPage');",
                  "    pm.expect(pageInfo).to.have.property('hasPreviousPage');",
                  "    pm.expect(pageInfo).to.have.property('startCursor');",
                  "    pm.expect(pageInfo).to.have.property('endCursor');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetVehicles($first: Int, $after: String, $filter: VehicleFilter) { vehicles(first: $first, after: $after, filter: $filter) { nodes { id vin make model year status healthStatus { overallScore status } } pageInfo { hasNextPage hasPreviousPage startCursor endCursor } totalCount } }\",\n  \"variables\": {\n    \"first\": 1AUTOMOTIVE_MANUFACTURER,\n    \"filter\": {\n      \"status\": [\"ACTIVE\", \"MAINTENANCE_REQUIRED\"],\n      \"healthScoreRange\": {\n        \"min\": AUTOMOTIVE_MANUFACTURER.5,\n        \"max\": 1.AUTOMOTIVE_MANUFACTURER\n      },\n      \"yearRange\": {\n        \"min\": 2AUTOMOTIVE_MANUFACTURER2AUTOMOTIVE_MANUFACTURER,\n        \"max\": 2AUTOMOTIVE_MANUFACTURER24\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        },
        {
          "name": "Search Vehicles by Text",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Search results contain relevance scores', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('searchVehicles');",
                  "    if (response.data.searchVehicles.length > AUTOMOTIVE_MANUFACTURER) {",
                  "        const result = response.data.searchVehicles[AUTOMOTIVE_MANUFACTURER];",
                  "        pm.expect(result).to.have.property('vehicle');",
                  "        pm.expect(result).to.have.property('relevanceScore');",
                  "        pm.expect(result).to.have.property('matchedFields');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query SearchVehicles($query: String!, $limit: Int) { searchVehicles(query: $query, limit: $limit) { vehicle { id vin make model year } relevanceScore matchedFields highlightedText } }\",\n  \"variables\": {\n    \"query\": \"Toyota Camry 2AUTOMOTIVE_MANUFACTURER23\",\n    \"limit\": 2AUTOMOTIVE_MANUFACTURER\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Diagnostic Data Queries",
      "item": [
        {
          "name": "Get Current Diagnostic Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Diagnostic data is comprehensive', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('vehicle');",
                  "    const diagnostics = response.data.vehicle.currentDiagnostics;",
                  "    pm.expect(diagnostics).to.have.property('timestamp');",
                  "    pm.expect(diagnostics).to.have.property('sessionId');",
                  "    pm.expect(diagnostics).to.have.property('engine');",
                  "    pm.expect(diagnostics).to.have.property('dataQuality');",
                  "});",
                  "",
                  "pm.test('Engine data contains key metrics', function () {",
                  "    const engine = pm.response.json().data.vehicle.currentDiagnostics.engine;",
                  "    pm.expect(engine).to.have.property('rpm');",
                  "    pm.expect(engine).to.have.property('temperature');",
                  "    pm.expect(engine).to.have.property('oilPressure');",
                  "    pm.expect(engine).to.have.property('loadPercentage');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetDiagnosticData($vehicleId: ID!) { vehicle(id: $vehicleId) { id currentDiagnostics { timestamp sessionId engine { rpm temperature oilPressure fuelPressure loadPercentage diagnosticCodes { code description severity status firstDetected } } transmission { fluidTemperature fluidPressure currentGear shiftQuality diagnosticCodes { code description severity } } brakes { frontPadThickness rearPadThickness fluidLevel systemPressure absStatus diagnosticCodes { code description } } electrical { batteryVoltage batteryStateOfCharge alternatorVoltage systemLoad diagnosticCodes { code description } } dataQuality { overallScore completeness freshness signalQuality { signalToNoise connectionStability packetLoss latency } } } } }\",\n  \"variables\": {\n    \"vehicleId\": \"{{test_vehicle_id}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        },
        {
          "name": "Get Historical Diagnostic Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Historical data contains time series', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('diagnosticHistory');",
                  "    pm.expect(response.data.diagnosticHistory).to.have.property('dataPoints');",
                  "    pm.expect(response.data.diagnosticHistory).to.have.property('aggregations');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetDiagnosticHistory($vehicleId: ID!, $timeRange: TimeRangeInput!, $interval: AggregationInterval) { diagnosticHistory(vehicleId: $vehicleId, timeRange: $timeRange, interval: $interval) { dataPoints { timestamp engine { rpm temperature oilPressure } transmission { fluidTemperature currentGear } dataQuality { overallScore } } aggregations { averages { engineRpm engineTemperature } maximums { engineRpm engineTemperature } minimums { engineRpm engineTemperature } } metadata { totalPoints dataQuality intervalMs } } }\",\n  \"variables\": {\n    \"vehicleId\": \"{{test_vehicle_id}}\",\n    \"timeRange\": {\n      \"startTime\": \"2AUTOMOTIVE_MANUFACTURER24-AUTOMOTIVE_MANUFACTURER1-AUTOMOTIVE_MANUFACTURER1TAUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER:AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER:AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURERZ\",\n      \"endTime\": \"2AUTOMOTIVE_MANUFACTURER24-AUTOMOTIVE_MANUFACTURER1-15T23:59:59Z\"\n    },\n    \"interval\": \"HOUR\"\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Maintenance Predictions",
      "item": [
        {
          "name": "Get Vehicle Predictions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Predictions contain AI model info', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('vehicle');",
                  "    const predictions = response.data.vehicle.maintenancePredictions;",
                  "    if (predictions.length > AUTOMOTIVE_MANUFACTURER) {",
                  "        const prediction = predictions[AUTOMOTIVE_MANUFACTURER];",
                  "        pm.expect(prediction).to.have.property('component');",
                  "        pm.expect(prediction).to.have.property('failureProbability');",
                  "        pm.expect(prediction).to.have.property('confidenceScore');",
                  "        pm.expect(prediction).to.have.property('timeToFailure');",
                  "        pm.expect(prediction).to.have.property('aiModelInfo');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetMaintenancePredictions($vehicleId: ID!, $filters: PredictionFilters) { vehicle(id: $vehicleId) { id maintenancePredictions(filters: $filters) { id component failureType failureProbability confidenceScore timeToFailure severity estimatedCost recommendedActions { action priority estimatedTime estimatedCost description } evidence { type description data weight confidence } aiModelInfo { modelId version accuracy lastTrained } createdAt validUntil } } }\",\n  \"variables\": {\n    \"vehicleId\": \"{{test_vehicle_id}}\",\n    \"filters\": {\n      \"confidenceThreshold\": AUTOMOTIVE_MANUFACTURER.7,\n      \"timeHorizonDays\": 9AUTOMOTIVE_MANUFACTURER,\n      \"severityLevels\": [\"MEDIUM\", \"HIGH\", \"CRITICAL\"]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        },
        {
          "name": "Get Fleet-wide Predictions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Fleet predictions include aggregations', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('fleet');",
                  "    const fleet = response.data.fleet;",
                  "    pm.expect(fleet).to.have.property('predictiveInsights');",
                  "    pm.expect(fleet).to.have.property('upcomingMaintenance');",
                  "    pm.expect(fleet).to.have.property('riskAssessment');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetFleetPredictions($fleetId: ID!, $timeHorizonDays: Int) { fleet(id: $fleetId) { id name predictiveInsights(timeHorizonDays: $timeHorizonDays) { pattern description affectedVehicleCount riskLevel confidence recommendations estimatedImpact { costSavings downtimeReduction } } upcomingMaintenance(timeHorizonDays: $timeHorizonDays) { vehicleId component predictedDate severity estimatedCost } riskAssessment { overallRiskScore highRiskVehicles { vehicleId riskScore primaryConcerns } riskByComponent { component riskScore affectedVehicles } } } }\",\n  \"variables\": {\n    \"fleetId\": \"{{test_fleet_id}}\",\n    \"timeHorizonDays\": 6AUTOMOTIVE_MANUFACTURER\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Fleet Management",
      "item": [
        {
          "name": "Get Fleet Overview",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Fleet overview contains all metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('fleet');",
                  "    const fleet = response.data.fleet;",
                  "    pm.expect(fleet).to.have.property('id');",
                  "    pm.expect(fleet).to.have.property('totalVehicles');",
                  "    pm.expect(fleet).to.have.property('healthDistribution');",
                  "    pm.expect(fleet).to.have.property('costMetrics');",
                  "    pm.expect(fleet).to.have.property('efficiencyMetrics');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetFleetOverview($fleetId: ID!) { fleet(id: $fleetId) { id name description totalVehicles healthyVehicles attentionRequired criticalVehicles averageHealthScore healthDistribution { healthy degraded warning critical outOfService } costMetrics { totalMaintenanceCost costPerMile costTrendPercentage breakdown { category amount percentage } } efficiencyMetrics { averageFuelEconomy utilizationRate downtimeHours maintenanceEfficiency } recentActivity { type description timestamp vehicleId } alerts(first: 5, severity: [HIGH, CRITICAL]) { nodes { id severity title message createdAt vehicle { id vin } } } } }\",\n  \"variables\": {\n    \"fleetId\": \"{{test_fleet_id}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        },
        {
          "name": "Get Fleet Analytics with Time Series",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Analytics include time series data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('fleetAnalytics');",
                  "    const analytics = response.data.fleetAnalytics;",
                  "    pm.expect(analytics).to.have.property('healthTrends');",
                  "    pm.expect(analytics).to.have.property('costTrends');",
                  "    pm.expect(analytics).to.have.property('utilizationTrends');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetFleetAnalytics($fleetId: ID!, $timeRange: TimeRangeInput!, $interval: AggregationInterval!) { fleetAnalytics(fleetId: $fleetId, timeRange: $timeRange, interval: $interval) { timePeriod healthTrends { timestamp averageHealthScore vehicleDistribution { healthy degraded warning critical } } costTrends { timestamp totalCost maintenanceCost fuelCost operationalCost } utilizationTrends { timestamp utilizationRate downtimeHours activeVehicles } benchmarkComparison { metric value industryAverage percentile trend } insights { type insight impact confidence recommendations } } }\",\n  \"variables\": {\n    \"fleetId\": \"{{test_fleet_id}}\",\n    \"timeRange\": {\n      \"startTime\": \"2AUTOMOTIVE_MANUFACTURER24-AUTOMOTIVE_MANUFACTURER1-AUTOMOTIVE_MANUFACTURER1TAUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER:AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER:AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURERZ\",\n      \"endTime\": \"2AUTOMOTIVE_MANUFACTURER24-AUTOMOTIVE_MANUFACTURER1-15T23:59:59Z\"\n    },\n    \"interval\": \"DAY\"\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Mutations",
      "item": [
        {
          "name": "Create Vehicle",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Generate unique VIN for testing",
                  "const timestamp = Date.now();",
                  "const testVin = 'GQLTEST' + timestamp.toString().slice(-8);",
                  "pm.variables.set('new_vehicle_vin', testVin);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Vehicle created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('createVehicle');",
                  "    const result = response.data.createVehicle;",
                  "    pm.expect(result).to.have.property('success', true);",
                  "    pm.expect(result).to.have.property('vehicle');",
                  "    pm.expect(result.vehicle).to.have.property('id');",
                  "    pm.expect(result.vehicle).to.have.property('vin', pm.variables.get('new_vehicle_vin'));",
                  "    ",
                  "    // Store created vehicle ID for cleanup",
                  "    pm.globals.set('gql_created_vehicle_id', result.vehicle.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation CreateVehicle($input: CreateVehicleInput!) { createVehicle(input: $input) { success message vehicle { id vin make model year status createdAt } errors { field message code } } }\",\n  \"variables\": {\n    \"input\": {\n      \"vin\": \"{{new_vehicle_vin}}\",\n      \"make\": \"Axiom\",\n      \"model\": \"Accord\",\n      \"year\": 2AUTOMOTIVE_MANUFACTURER23,\n      \"engineType\": \"FOUR_CYLINDER\",\n      \"transmissionType\": \"AUTOMATIC\",\n      \"fuelType\": \"GASOLINE\",\n      \"specifications\": {\n        \"engineDisplacement\": \"2.AUTOMOTIVE_MANUFACTURERL\",\n        \"horsepower\": 192,\n        \"fuelCapacity\": 14.8,\n        \"weight\": 32AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER\n      },\n      \"diagnosticCapabilities\": {\n        \"obdVersion\": \"OBD_II\",\n        \"canBusSupported\": true,\n        \"supportedProtocols\": [\"ISO_14229\", \"J1939\"]\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        },
        {
          "name": "Update Vehicle Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Vehicle status updated', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('updateVehicleStatus');",
                  "    const result = response.data.updateVehicleStatus;",
                  "    pm.expect(result).to.have.property('success', true);",
                  "    pm.expect(result.vehicle).to.have.property('status', 'MAINTENANCE_SCHEDULED');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation UpdateVehicleStatus($vehicleId: ID!, $status: VehicleStatus!, $reason: String) { updateVehicleStatus(vehicleId: $vehicleId, status: $status, reason: $reason) { success message vehicle { id status updatedAt } errors { field message code } } }\",\n  \"variables\": {\n    \"vehicleId\": \"{{gql_created_vehicle_id}}\",\n    \"status\": \"MAINTENANCE_SCHEDULED\",\n    \"reason\": \"Scheduled 3AUTOMOTIVE_MANUFACTURERk mile service\"\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        },
        {
          "name": "Create Alert Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Alert subscription created', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('createAlertSubscription');",
                  "    const result = response.data.createAlertSubscription;",
                  "    pm.expect(result).to.have.property('success', true);",
                  "    pm.expect(result).to.have.property('subscription');",
                  "    pm.expect(result.subscription).to.have.property('id');",
                  "    ",
                  "    pm.globals.set('gql_subscription_id', result.subscription.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation CreateAlertSubscription($input: CreateAlertSubscriptionInput!) { createAlertSubscription(input: $input) { success message subscription { id name status filters { fleetIds vehicleIds severityLevels alertTypes } notificationChannels { type address isActive } createdAt } errors { field message code } } }\",\n  \"variables\": {\n    \"input\": {\n      \"name\": \"GraphQL Test Subscription\",\n      \"filters\": {\n        \"fleetIds\": [\"{{test_fleet_id}}\"],\n        \"severityLevels\": [\"HIGH\", \"CRITICAL\"],\n        \"alertTypes\": [\"PREDICTIVE_MAINTENANCE\", \"SYSTEM_FAILURE\"]\n      },\n      \"notificationChannels\": [\n        {\n          \"type\": \"EMAIL\",\n          \"address\": \"test@example.com\"\n        }\n      ]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        },
        {
          "name": "Acknowledge Alert",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Create a test alert ID for acknowledgment",
                  "pm.variables.set('test_alert_id', 'TEST_ALERT_' + Date.now());"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "// Note: This test may fail if alert doesn't exist, which is expected in test environment",
                  "pm.test('Alert acknowledgment response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('acknowledgeAlert');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation AcknowledgeAlert($alertId: ID!, $note: String) { acknowledgeAlert(alertId: $alertId, note: $note) { success message alert { id status acknowledgedBy acknowledgedAt acknowledgmentNote } errors { field message code } } }\",\n  \"variables\": {\n    \"alertId\": \"{{test_alert_id}}\",\n    \"note\": \"Alert reviewed and maintenance scheduled\"\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Real-time Subscriptions",
      "item": [
        {
          "name": "Vehicle Health Updates Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Note: This is a subscription test over HTTP (for testing purposes)",
                  "// In real implementation, this would use WebSocket protocol",
                  "pm.test('Subscription query is valid', function () {",
                  "    // Since we're testing over HTTP, we expect an error about subscription protocol",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('errors');",
                  "    const error = response.errors[AUTOMOTIVE_MANUFACTURER];",
                  "    pm.expect(error.message).to.include('subscription');",
                  "});",
                  "",
                  "// Set flag to expect GraphQL errors for this test",
                  "pm.variables.set('expect_graphql_errors', true);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"subscription VehicleHealthUpdates($vehicleId: ID!) { vehicleHealthUpdates(vehicleId: $vehicleId) { vehicle { id vin } updateType healthStatus { overallScore status lastUpdated components { name healthScore status trend } } changedFields timestamp } }\",\n  \"variables\": {\n    \"vehicleId\": \"{{test_vehicle_id}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        },
        {
          "name": "Fleet Alerts Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Note: Testing subscription query structure over HTTP",
                  "pm.test('Subscription query structure is valid', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('errors');",
                  "    const error = response.errors[AUTOMOTIVE_MANUFACTURER];",
                  "    pm.expect(error.message).to.include('subscription');",
                  "});",
                  "",
                  "pm.variables.set('expect_graphql_errors', true);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"subscription FleetAlerts($fleetId: ID!, $severityFilter: [AlertSeverity!]) { fleetAlerts(fleetId: $fleetId, severityFilter: $severityFilter) { alert { id title message severity alertType createdAt vehicle { id vin make model } component predictedFailureTime estimatedCost recommendedActions } } }\",\n  \"variables\": {\n    \"fleetId\": \"{{test_fleet_id}}\",\n    \"severityFilter\": [\"HIGH\", \"CRITICAL\"]\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Handling & Validation",
      "item": [
        {
          "name": "Test Invalid Vehicle ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER (GraphQL errors in response)', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('GraphQL error returned for invalid ID', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('errors');",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.errors.length).to.be.greaterThan(AUTOMOTIVE_MANUFACTURER);",
                  "    ",
                  "    const error = response.errors[AUTOMOTIVE_MANUFACTURER];",
                  "    pm.expect(error).to.have.property('message');",
                  "    pm.expect(error).to.have.property('extensions');",
                  "    pm.expect(error.extensions).to.have.property('code', 'VEHICLE_NOT_FOUND');",
                  "});",
                  "",
                  "pm.variables.set('expect_graphql_errors', true);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetVehicle($id: ID!) { vehicle(id: $id) { id vin make model } }\",\n  \"variables\": {\n    \"id\": \"INVALID_VEHICLE_ID_12345\"\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        },
        {
          "name": "Test Invalid Mutation Input",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER (GraphQL validation errors)', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Validation errors returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('errors');",
                  "    const error = response.errors[AUTOMOTIVE_MANUFACTURER];",
                  "    pm.expect(error.extensions).to.have.property('code', 'VALIDATION_ERROR');",
                  "});",
                  "",
                  "pm.variables.set('expect_graphql_errors', true);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation CreateVehicle($input: CreateVehicleInput!) { createVehicle(input: $input) { success message errors { field message code } } }\",\n  \"variables\": {\n    \"input\": {\n      \"vin\": \"\",\n      \"make\": \"\",\n      \"model\": \"\",\n      \"year\": 18AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        },
        {
          "name": "Test Query Complexity Limits",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Query complexity protection works', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.errors) {",
                  "        const complexityError = response.errors.find(err => ",
                  "            err.message.includes('complexity') || err.message.includes('depth')",
                  "        );",
                  "        if (complexityError) {",
                  "            pm.expect(complexityError.extensions.code).to.equal('QUERY_TOO_COMPLEX');",
                  "        }",
                  "    }",
                  "});",
                  "",
                  "pm.variables.set('expect_graphql_errors', true);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query ComplexQuery { vehicles(first: 1AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER) { nodes { id vin fleet { id vehicles(first: 1AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER) { nodes { id healthStatus { components { parameters { normalRange { min max } } } } currentDiagnostics { engine { diagnosticCodes { code } } transmission { diagnosticCodes { code } } brakes { diagnosticCodes { code } } } maintenancePredictions { evidence { data } aiModelInfo { modelId } } } } } } } }\"\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        },
        {
          "name": "Test Rate Limiting",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Rate limiting headers present', function () {",
                  "    pm.expect(pm.response.headers.get('X-RateLimit-Limit')).to.exist;",
                  "    pm.expect(pm.response.headers.get('X-RateLimit-Remaining')).to.exist;",
                  "});",
                  "",
                  "pm.test('Response is successful or rate limited', function () {",
                  "    pm.expect([2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER, 429]).to.include(pm.response.code);",
                  "    ",
                  "    if (pm.response.code === 429) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.errors[AUTOMOTIVE_MANUFACTURER].extensions.code).to.equal('RATE_LIMIT_EXCEEDED');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query SimpleVehicleQuery { vehicles(first: 1) { nodes { id vin } } }\"\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Cleanup",
      "item": [
        {
          "name": "Delete Test Vehicle",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER', function () {",
                  "    pm.response.to.have.status(2AUTOMOTIVE_MANUFACTURERAUTOMOTIVE_MANUFACTURER);",
                  "});",
                  "",
                  "pm.test('Vehicle deleted successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('deleteVehicle');",
                  "    pm.expect(response.data.deleteVehicle).to.have.property('success', true);",
                  "});",
                  "",
                  "// Clean up variables",
                  "pm.globals.unset('gql_created_vehicle_id');",
                  "pm.globals.unset('gql_subscription_id');",
                  "pm.variables.unset('expect_graphql_errors');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation DeleteVehicle($vehicleId: ID!) { deleteVehicle(vehicleId: $vehicleId) { success message errors { field message code } } }\",\n  \"variables\": {\n    \"vehicleId\": \"{{gql_created_vehicle_id}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{graphql_endpoint}}",
              "host": ["{{graphql_endpoint}}"]
            }
          }
        }
      ]
    }
  ]
}
