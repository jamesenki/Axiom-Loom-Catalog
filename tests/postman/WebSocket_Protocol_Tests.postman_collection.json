{
  "info": {
    "name": "AI Predictive Maintenance Engine - WebSocket Protocol Tests",
    "description": "Comprehensive WebSocket protocol test suite with real-time communication testing, subscription management, and error handling scenarios",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// WebSocket connection setup",
          "pm.variables.set('ws_endpoint', 'wss://api.predictive-maintenance.com/v1/ws');",
          "pm.variables.set('test_session_id', 'ws_test_' + Date.now());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global WebSocket test validation",
          "pm.test('WebSocket connection established', function () {",
          "    // This would be implemented with WebSocket client",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "ws_endpoint",
      "value": "wss://api.predictive-maintenance.com/v1/ws",
      "type": "string"
    },
    {
      "key": "test_vehicle_id",
      "value": "TEST_VIN_123456789",
      "type": "string"
    },
    {
      "key": "test_fleet_id",
      "value": "TEST_FLEET_001",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Connection Management",
      "item": [
        {
          "name": "WebSocket Connection Test",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// WebSocket connection test using HTTP endpoint for validation",
                  "// In real implementation, this would use WebSocket protocol",
                  "pm.test('Can validate WebSocket endpoint', function () {",
                  "    // Test WebSocket endpoint availability via HTTP",
                  "    console.log('Testing WebSocket endpoint availability');",
                  "});"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('WebSocket endpoint is reachable', function () {",
                  "    // This test validates the WebSocket endpoint",
                  "    pm.expect(pm.response.code).to.be.oneOf([101, 200, 426]);",
                  "});",
                  "",
                  "pm.test('Proper WebSocket headers', function () {",
                  "    const upgradeHeader = pm.response.headers.get('Upgrade');",
                  "    const connectionHeader = pm.response.headers.get('Connection');",
                  "    ",
                  "    if (pm.response.code === 101) {",
                  "        pm.expect(upgradeHeader).to.equal('websocket');",
                  "        pm.expect(connectionHeader).to.include('Upgrade');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Upgrade",
                "value": "websocket"
              },
              {
                "key": "Connection",
                "value": "Upgrade"
              },
              {
                "key": "Sec-WebSocket-Key",
                "value": "dGhlIHNhbXBsZSBub25jZQ=="
              },
              {
                "key": "Sec-WebSocket-Version",
                "value": "13"
              }
            ],
            "url": {
              "raw": "{{base_url}}/ws",
              "host": ["{{base_url}}"],
              "path": ["ws"]
            }
          }
        },
        {
          "name": "Authentication Message Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Simulate WebSocket authentication message validation",
                  "pm.test('Authentication message format is valid', function () {",
                  "    const authMessage = {",
                  "        type: 'authenticate',",
                  "        payload: {",
                  "            token: pm.globals.get('auth_token'),",
                  "            client_id: pm.variables.get('test_session_id'),",
                  "            capabilities: ['vehicle_monitoring', 'diagnostics', 'alerts']",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(authMessage).to.have.property('type', 'authenticate');",
                  "    pm.expect(authMessage.payload).to.have.property('token');",
                  "    pm.expect(authMessage.payload).to.have.property('client_id');",
                  "    pm.expect(authMessage.payload.capabilities).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Auth response validation', function () {",
                  "    const authResponse = {",
                  "        type: 'connection_ack',",
                  "        payload: {",
                  "            connection_id: 'conn_98765',",
                  "            session_id: pm.variables.get('test_session_id'),",
                  "            server_capabilities: ['real_time_health', 'diagnostic_streaming'],",
                  "            max_subscriptions: 100,",
                  "            heartbeat_interval: 30000",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(authResponse.type).to.equal('connection_ack');",
                  "    pm.expect(authResponse.payload).to.have.property('connection_id');",
                  "    pm.expect(authResponse.payload).to.have.property('max_subscriptions');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message_type\": \"websocket_auth_test\",\n  \"auth_payload\": {\n    \"token\": \"{{auth_token}}\",\n    \"client_id\": \"{{test_session_id}}\",\n    \"capabilities\": [\"vehicle_monitoring\", \"diagnostics\", \"alerts\"]\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/auth",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "auth"]
            }
          }
        }
      ]
    },
    {
      "name": "Vehicle Health Subscriptions",
      "item": [
        {
          "name": "Subscribe to Vehicle Health Updates",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Health subscription message format', function () {",
                  "    const subscriptionMessage = {",
                  "        id: 'msg_001',",
                  "        type: 'subscribe_vehicle_health',",
                  "        payload: {",
                  "            vehicle_id: pm.variables.get('test_vehicle_id'),",
                  "            update_frequency: 'realtime',",
                  "            components: ['engine', 'transmission', 'brakes'],",
                  "            include_predictions: true,",
                  "            health_score_threshold: 0.7",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(subscriptionMessage).to.have.property('id');",
                  "    pm.expect(subscriptionMessage).to.have.property('type', 'subscribe_vehicle_health');",
                  "    pm.expect(subscriptionMessage.payload).to.have.property('vehicle_id');",
                  "    pm.expect(subscriptionMessage.payload.components).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Health update message validation', function () {",
                  "    const healthUpdate = {",
                  "        id: 'msg_002',",
                  "        type: 'vehicle_health_update',",
                  "        payload: {",
                  "            vehicle_id: pm.variables.get('test_vehicle_id'),",
                  "            health_score: 0.85,",
                  "            status: 'operational',",
                  "            components: [{",
                  "                name: 'engine',",
                  "                health_score: 0.92,",
                  "                status: 'healthy',",
                  "                parameters: [{",
                  "                    name: 'temperature',",
                  "                    value: 185.5,",
                  "                    unit: 'Â°F',",
                  "                    status: 'normal'",
                  "                }]",
                  "            }],",
                  "            data_quality: {",
                  "                overall_score: 0.95,",
                  "                signal_strength: 0.98",
                  "            }",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(healthUpdate.payload).to.have.property('health_score');",
                  "    pm.expect(healthUpdate.payload.health_score).to.be.within(0, 1);",
                  "    pm.expect(healthUpdate.payload.components).to.be.an('array');",
                  "    pm.expect(healthUpdate.payload).to.have.property('data_quality');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"websocket_subscription\",\n  \"subscription_message\": {\n    \"id\": \"msg_001\",\n    \"type\": \"subscribe_vehicle_health\",\n    \"payload\": {\n      \"vehicle_id\": \"{{test_vehicle_id}}\",\n      \"update_frequency\": \"realtime\",\n      \"components\": [\"engine\", \"transmission\", \"brakes\"],\n      \"include_predictions\": true,\n      \"health_score_threshold\": 0.7\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/subscription",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "subscription"]
            }
          }
        },
        {
          "name": "Unsubscribe from Vehicle Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unsubscribe message format', function () {",
                  "    const unsubscribeMessage = {",
                  "        id: 'msg_003',",
                  "        type: 'unsubscribe_vehicle_health',",
                  "        payload: {",
                  "            vehicle_id: pm.variables.get('test_vehicle_id')",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(unsubscribeMessage).to.have.property('type', 'unsubscribe_vehicle_health');",
                  "    pm.expect(unsubscribeMessage.payload).to.have.property('vehicle_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"websocket_unsubscribe\",\n  \"unsubscribe_message\": {\n    \"id\": \"msg_003\",\n    \"type\": \"unsubscribe_vehicle_health\",\n    \"payload\": {\n      \"vehicle_id\": \"{{test_vehicle_id}}\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/unsubscribe",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "unsubscribe"]
            }
          }
        }
      ]
    },
    {
      "name": "Real-time Diagnostic Streaming",
      "item": [
        {
          "name": "Subscribe to Diagnostic Data Stream",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Diagnostic subscription format', function () {",
                  "    const diagnosticSubscription = {",
                  "        id: 'msg_004',",
                  "        type: 'subscribe_diagnostics',",
                  "        payload: {",
                  "            vehicle_id: pm.variables.get('test_vehicle_id'),",
                  "            sample_rate: 100,",
                  "            components: ['engine', 'transmission'],",
                  "            data_format: 'compressed',",
                  "            include_calculated_values: true,",
                  "            quality_threshold: 'good'",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(diagnosticSubscription.payload).to.have.property('sample_rate');",
                  "    pm.expect(diagnosticSubscription.payload.sample_rate).to.be.a('number');",
                  "    pm.expect(diagnosticSubscription.payload).to.have.property('data_format');",
                  "});",
                  "",
                  "pm.test('Diagnostic data stream validation', function () {",
                  "    const diagnosticData = {",
                  "        id: 'msg_005',",
                  "        type: 'diagnostic_data',",
                  "        payload: {",
                  "            vehicle_id: pm.variables.get('test_vehicle_id'),",
                  "            session_id: 'diag_session_789',",
                  "            sample_time: '2024-01-15T10:30:00.123Z',",
                  "            engine: {",
                  "                rpm: 2150,",
                  "                load: 45.5,",
                  "                fuel_trim_st: 2.3,",
                  "                manifold_pressure: 14.7",
                  "            },",
                  "            quality_indicators: {",
                  "                signal_quality: 0.96,",
                  "                data_completeness: 1.0",
                  "            }",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(diagnosticData.payload).to.have.property('engine');",
                  "    pm.expect(diagnosticData.payload.engine).to.have.property('rpm');",
                  "    pm.expect(diagnosticData.payload).to.have.property('quality_indicators');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"diagnostic_stream_subscription\",\n  \"subscription_message\": {\n    \"id\": \"msg_004\",\n    \"type\": \"subscribe_diagnostics\",\n    \"payload\": {\n      \"vehicle_id\": \"{{test_vehicle_id}}\",\n      \"sample_rate\": 100,\n      \"components\": [\"engine\", \"transmission\"],\n      \"data_format\": \"compressed\",\n      \"include_calculated_values\": true,\n      \"quality_threshold\": \"good\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/diagnostic-stream",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "diagnostic-stream"]
            }
          }
        },
        {
          "name": "Test High-Frequency Data Handling",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('High-frequency data format validation', function () {",
                  "    const highFreqData = {",
                  "        id: 'msg_006',",
                  "        type: 'diagnostic_data_batch',",
                  "        payload: {",
                  "            vehicle_id: pm.variables.get('test_vehicle_id'),",
                  "            batch_id: 'batch_001',",
                  "            sample_count: 50,",
                  "            time_range: {",
                  "                start: '2024-01-15T10:30:00.000Z',",
                  "                end: '2024-01-15T10:30:00.500Z'",
                  "            },",
                  "            compressed_data: 'base64_encoded_data_here',",
                  "            data_quality: {",
                  "                packet_loss: 0.02,",
                  "                average_signal_strength: 0.94",
                  "            }",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(highFreqData.payload).to.have.property('sample_count');",
                  "    pm.expect(highFreqData.payload).to.have.property('compressed_data');",
                  "    pm.expect(highFreqData.payload.data_quality).to.have.property('packet_loss');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"high_frequency_data\",\n  \"batch_data\": {\n    \"id\": \"msg_006\",\n    \"type\": \"diagnostic_data_batch\",\n    \"payload\": {\n      \"vehicle_id\": \"{{test_vehicle_id}}\",\n      \"batch_id\": \"batch_001\",\n      \"sample_count\": 50,\n      \"time_range\": {\n        \"start\": \"2024-01-15T10:30:00.000Z\",\n        \"end\": \"2024-01-15T10:30:00.500Z\"\n      },\n      \"compressed_data\": \"base64_encoded_data_here\",\n      \"data_quality\": {\n        \"packet_loss\": 0.02,\n        \"average_signal_strength\": 0.94\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/high-frequency",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "high-frequency"]
            }
          }
        }
      ]
    },
    {
      "name": "Alert and Notification System",
      "item": [
        {
          "name": "Subscribe to Alerts",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Alert subscription configuration', function () {",
                  "    const alertSubscription = {",
                  "        id: 'msg_007',",
                  "        type: 'subscribe_alerts',",
                  "        payload: {",
                  "            filters: {",
                  "                vehicle_ids: [pm.variables.get('test_vehicle_id')],",
                  "                fleet_ids: [pm.variables.get('test_fleet_id')],",
                  "                severity_levels: ['medium', 'high', 'critical'],",
                  "                component_types: ['engine', 'brakes'],",
                  "                alert_types: ['predictive_maintenance', 'diagnostic_trouble']",
                  "            },",
                  "            include_recommendations: true,",
                  "            escalation_rules: true",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(alertSubscription.payload).to.have.property('filters');",
                  "    pm.expect(alertSubscription.payload.filters).to.have.property('severity_levels');",
                  "    pm.expect(alertSubscription.payload).to.have.property('include_recommendations');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"alert_subscription\",\n  \"subscription_message\": {\n    \"id\": \"msg_007\",\n    \"type\": \"subscribe_alerts\",\n    \"payload\": {\n      \"filters\": {\n        \"vehicle_ids\": [\"{{test_vehicle_id}}\"],\n        \"fleet_ids\": [\"{{test_fleet_id}}\"],\n        \"severity_levels\": [\"medium\", \"high\", \"critical\"],\n        \"component_types\": [\"engine\", \"brakes\"],\n        \"alert_types\": [\"predictive_maintenance\", \"diagnostic_trouble\"]\n      },\n      \"include_recommendations\": true,\n      \"escalation_rules\": true\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/alert-subscription",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "alert-subscription"]
            }
          }
        },
        {
          "name": "Test Alert Notification Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Critical alert notification structure', function () {",
                  "    const criticalAlert = {",
                  "        id: 'msg_008',",
                  "        type: 'alert_notification',",
                  "        timestamp: '2024-01-15T10:30:00Z',",
                  "        priority: 'critical',",
                  "        payload: {",
                  "            alert_id: 'alert_12345',",
                  "            alert_type: 'predictive_maintenance',",
                  "            severity: 'high',",
                  "            vehicle_id: pm.variables.get('test_vehicle_id'),",
                  "            component: 'transmission',",
                  "            title: 'Transmission Failure Prediction',",
                  "            message: 'High probability of transmission failure detected',",
                  "            details: {",
                  "                failure_probability: 0.85,",
                  "                confidence: 0.92,",
                  "                predicted_failure_time: '2024-01-20T14:30:00Z'",
                  "            },",
                  "            recommendations: [{",
                  "                action: 'immediate_inspection',",
                  "                priority: 'high',",
                  "                estimated_time: '2h'",
                  "            }],",
                  "            escalation: {",
                  "                auto_escalate_in: '1h',",
                  "                escalation_triggered: false",
                  "            }",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(criticalAlert).to.have.property('priority', 'critical');",
                  "    pm.expect(criticalAlert.payload).to.have.property('alert_id');",
                  "    pm.expect(criticalAlert.payload).to.have.property('severity');",
                  "    pm.expect(criticalAlert.payload).to.have.property('recommendations');",
                  "    pm.expect(criticalAlert.payload.recommendations).to.be.an('array');",
                  "    pm.expect(criticalAlert.payload).to.have.property('escalation');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"alert_notification\",\n  \"alert_message\": {\n    \"id\": \"msg_008\",\n    \"type\": \"alert_notification\",\n    \"timestamp\": \"2024-01-15T10:30:00Z\",\n    \"priority\": \"critical\",\n    \"payload\": {\n      \"alert_id\": \"alert_12345\",\n      \"alert_type\": \"predictive_maintenance\",\n      \"severity\": \"high\",\n      \"vehicle_id\": \"{{test_vehicle_id}}\",\n      \"component\": \"transmission\",\n      \"title\": \"Transmission Failure Prediction\",\n      \"message\": \"High probability of transmission failure detected\",\n      \"details\": {\n        \"failure_probability\": 0.85,\n        \"confidence\": 0.92,\n        \"predicted_failure_time\": \"2024-01-20T14:30:00Z\"\n      },\n      \"recommendations\": [{\n        \"action\": \"immediate_inspection\",\n        \"priority\": \"high\",\n        \"estimated_time\": \"2h\"\n      }],\n      \"escalation\": {\n        \"auto_escalate_in\": \"1h\",\n        \"escalation_triggered\": false\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/alert-notification",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "alert-notification"]
            }
          }
        },
        {
          "name": "Test Alert Acknowledgment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Alert acknowledgment format', function () {",
                  "    const alertAck = {",
                  "        id: 'msg_009',",
                  "        type: 'acknowledge_alert',",
                  "        payload: {",
                  "            alert_id: 'alert_12345',",
                  "            acknowledged_by: 'user_789',",
                  "            acknowledgment_note: 'Maintenance scheduled for tomorrow',",
                  "            action_plan: 'Schedule inspection and fluid change'",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(alertAck.payload).to.have.property('alert_id');",
                  "    pm.expect(alertAck.payload).to.have.property('acknowledged_by');",
                  "    pm.expect(alertAck.payload).to.have.property('acknowledgment_note');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"alert_acknowledgment\",\n  \"ack_message\": {\n    \"id\": \"msg_009\",\n    \"type\": \"acknowledge_alert\",\n    \"payload\": {\n      \"alert_id\": \"alert_12345\",\n      \"acknowledged_by\": \"user_789\",\n      \"acknowledgment_note\": \"Maintenance scheduled for tomorrow\",\n      \"action_plan\": \"Schedule inspection and fluid change\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/alert-ack",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "alert-ack"]
            }
          }
        }
      ]
    },
    {
      "name": "Interactive Diagnostic Commands",
      "item": [
        {
          "name": "Send Diagnostic Command",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Diagnostic command format', function () {",
                  "    const diagnosticCommand = {",
                  "        id: 'msg_010',",
                  "        type: 'diagnostic_command',",
                  "        payload: {",
                  "            vehicle_id: pm.variables.get('test_vehicle_id'),",
                  "            command_type: 'read_dtc',",
                  "            target_system: 'engine',",
                  "            parameters: {",
                  "                clear_after_read: false,",
                  "                include_pending: true,",
                  "                include_history: true",
                  "            },",
                  "            timeout: 30000,",
                  "            priority: 'normal'",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(diagnosticCommand.payload).to.have.property('command_type');",
                  "    pm.expect(diagnosticCommand.payload).to.have.property('target_system');",
                  "    pm.expect(diagnosticCommand.payload).to.have.property('parameters');",
                  "    pm.expect(diagnosticCommand.payload).to.have.property('timeout');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"diagnostic_command\",\n  \"command_message\": {\n    \"id\": \"msg_010\",\n    \"type\": \"diagnostic_command\",\n    \"payload\": {\n      \"vehicle_id\": \"{{test_vehicle_id}}\",\n      \"command_type\": \"read_dtc\",\n      \"target_system\": \"engine\",\n      \"parameters\": {\n        \"clear_after_read\": false,\n        \"include_pending\": true,\n        \"include_history\": true\n      },\n      \"timeout\": 30000,\n      \"priority\": \"normal\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/diagnostic-command",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "diagnostic-command"]
            }
          }
        },
        {
          "name": "Test Command Response",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Command response validation', function () {",
                  "    const commandResponse = {",
                  "        id: 'msg_011',",
                  "        type: 'diagnostic_command_response',",
                  "        payload: {",
                  "            command_id: 'cmd_12345',",
                  "            original_message_id: 'msg_010',",
                  "            vehicle_id: pm.variables.get('test_vehicle_id'),",
                  "            status: 'completed',",
                  "            execution_time: 2500,",
                  "            result: {",
                  "                dtc_count: 3,",
                  "                diagnostic_codes: [{",
                  "                    code: 'P0171',",
                  "                    description: 'System Too Lean (Bank 1)',",
                  "                    status: 'active',",
                  "                    freeze_frame_data: {",
                  "                        rpm: 850,",
                  "                        load: 15.2",
                  "                    }",
                  "                }]",
                  "            }",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(commandResponse.payload).to.have.property('command_id');",
                  "    pm.expect(commandResponse.payload).to.have.property('status');",
                  "    pm.expect(commandResponse.payload).to.have.property('execution_time');",
                  "    pm.expect(commandResponse.payload).to.have.property('result');",
                  "    pm.expect(commandResponse.payload.result).to.have.property('diagnostic_codes');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"command_response\",\n  \"response_message\": {\n    \"id\": \"msg_011\",\n    \"type\": \"diagnostic_command_response\",\n    \"payload\": {\n      \"command_id\": \"cmd_12345\",\n      \"original_message_id\": \"msg_010\",\n      \"vehicle_id\": \"{{test_vehicle_id}}\",\n      \"status\": \"completed\",\n      \"execution_time\": 2500,\n      \"result\": {\n        \"dtc_count\": 3,\n        \"diagnostic_codes\": [{\n          \"code\": \"P0171\",\n          \"description\": \"System Too Lean (Bank 1)\",\n          \"status\": \"active\",\n          \"freeze_frame_data\": {\n            \"rpm\": 850,\n            \"load\": 15.2\n          }\n        }]\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/command-response",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "command-response"]
            }
          }
        }
      ]
    },
    {
      "name": "Fleet Operations",
      "item": [
        {
          "name": "Subscribe to Fleet Events",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Fleet event subscription format', function () {",
                  "    const fleetSubscription = {",
                  "        id: 'msg_012',",
                  "        type: 'subscribe_fleet_events',",
                  "        payload: {",
                  "            fleet_id: pm.variables.get('test_fleet_id'),",
                  "            event_types: ['vehicle_status_change', 'maintenance_completion'],",
                  "            include_metrics: true,",
                  "            aggregation_level: 'fleet'",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(fleetSubscription.payload).to.have.property('fleet_id');",
                  "    pm.expect(fleetSubscription.payload).to.have.property('event_types');",
                  "    pm.expect(fleetSubscription.payload.event_types).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"fleet_event_subscription\",\n  \"subscription_message\": {\n    \"id\": \"msg_012\",\n    \"type\": \"subscribe_fleet_events\",\n    \"payload\": {\n      \"fleet_id\": \"{{test_fleet_id}}\",\n      \"event_types\": [\"vehicle_status_change\", \"maintenance_completion\"],\n      \"include_metrics\": true,\n      \"aggregation_level\": \"fleet\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/fleet-subscription",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "fleet-subscription"]
            }
          }
        },
        {
          "name": "Test Real-time Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics update format', function () {",
                  "    const analyticsUpdate = {",
                  "        id: 'msg_013',",
                  "        type: 'analytics_update',",
                  "        payload: {",
                  "            scope: 'fleet',",
                  "            fleet_id: pm.variables.get('test_fleet_id'),",
                  "            timestamp: '2024-01-15T10:30:00Z',",
                  "            health_distribution: {",
                  "                healthy: 42,",
                  "                degraded: 6,",
                  "                warning: 2,",
                  "                critical: 0",
                  "            },",
                  "            cost_trending: {",
                  "                current_period: 15750.00,",
                  "                trend: 'increasing',",
                  "                percentage_change: 6.3",
                  "            },",
                  "            predictive_insights: [{",
                  "                insight: 'brake_maintenance_surge',",
                  "                description: '6 vehicles predicted to need brake service within 30 days',",
                  "                potential_savings: 850.00",
                  "            }]",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(analyticsUpdate.payload).to.have.property('scope');",
                  "    pm.expect(analyticsUpdate.payload).to.have.property('health_distribution');",
                  "    pm.expect(analyticsUpdate.payload).to.have.property('cost_trending');",
                  "    pm.expect(analyticsUpdate.payload).to.have.property('predictive_insights');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"analytics_update\",\n  \"analytics_message\": {\n    \"id\": \"msg_013\",\n    \"type\": \"analytics_update\",\n    \"payload\": {\n      \"scope\": \"fleet\",\n      \"fleet_id\": \"{{test_fleet_id}}\",\n      \"timestamp\": \"2024-01-15T10:30:00Z\",\n      \"health_distribution\": {\n        \"healthy\": 42,\n        \"degraded\": 6,\n        \"warning\": 2,\n        \"critical\": 0\n      },\n      \"cost_trending\": {\n        \"current_period\": 15750.00,\n        \"trend\": \"increasing\",\n        \"percentage_change\": 6.3\n      },\n      \"predictive_insights\": [{\n        \"insight\": \"brake_maintenance_surge\",\n        \"description\": \"6 vehicles predicted to need brake service within 30 days\",\n        \"potential_savings\": 850.00\n      }]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/analytics-update",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "analytics-update"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Handling & Edge Cases",
      "item": [
        {
          "name": "Test Connection Error Scenarios",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('WebSocket error message format', function () {",
                  "    const errorMessage = {",
                  "        id: 'msg_error_001',",
                  "        type: 'error',",
                  "        payload: {",
                  "            error_code: 'VEHICLE_NOT_FOUND',",
                  "            error_message: 'Vehicle with ID does not exist',",
                  "            error_details: {",
                  "                request_id: 'req_12345',",
                  "                timestamp: '2024-01-15T10:30:00Z',",
                  "                retry_after: 5000",
                  "            },",
                  "            original_message_id: 'msg_001'",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(errorMessage.payload).to.have.property('error_code');",
                  "    pm.expect(errorMessage.payload).to.have.property('error_message');",
                  "    pm.expect(errorMessage.payload).to.have.property('error_details');",
                  "    pm.expect(errorMessage.payload).to.have.property('original_message_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"error_scenario\",\n  \"error_message\": {\n    \"id\": \"msg_error_001\",\n    \"type\": \"error\",\n    \"payload\": {\n      \"error_code\": \"VEHICLE_NOT_FOUND\",\n      \"error_message\": \"Vehicle with ID does not exist\",\n      \"error_details\": {\n        \"request_id\": \"req_12345\",\n        \"timestamp\": \"2024-01-15T10:30:00Z\",\n        \"retry_after\": 5000\n      },\n      \"original_message_id\": \"msg_001\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/error-scenario",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "error-scenario"]
            }
          }
        },
        {
          "name": "Test Rate Limiting",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Rate limiting enforcement', function () {",
                  "    // Test WebSocket rate limiting",
                  "    const rateLimitError = {",
                  "        id: 'msg_error_002',",
                  "        type: 'error',",
                  "        payload: {",
                  "            error_code: 'RATE_LIMIT_EXCEEDED',",
                  "            error_message: 'Message rate limit exceeded',",
                  "            error_details: {",
                  "                limit: 1000,",
                  "                window: '60s',",
                  "                retry_after: 30000",
                  "            }",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.expect(rateLimitError.payload.error_code).to.equal('RATE_LIMIT_EXCEEDED');",
                  "    pm.expect(rateLimitError.payload.error_details).to.have.property('limit');",
                  "    pm.expect(rateLimitError.payload.error_details).to.have.property('retry_after');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"rate_limit_test\",\n  \"rate_limit_error\": {\n    \"id\": \"msg_error_002\",\n    \"type\": \"error\",\n    \"payload\": {\n      \"error_code\": \"RATE_LIMIT_EXCEEDED\",\n      \"error_message\": \"Message rate limit exceeded\",\n      \"error_details\": {\n        \"limit\": 1000,\n        \"window\": \"60s\",\n        \"retry_after\": 30000\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/rate-limit",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "rate-limit"]
            }
          }
        },
        {
          "name": "Test Heartbeat and Reconnection",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Heartbeat message format', function () {",
                  "    const pingMessage = {",
                  "        type: 'ping',",
                  "        timestamp: '2024-01-15T10:30:00Z'",
                  "    };",
                  "    ",
                  "    const pongMessage = {",
                  "        type: 'pong',",
                  "        timestamp: '2024-01-15T10:30:00.125Z',",
                  "        latency: 125",
                  "    };",
                  "    ",
                  "    pm.expect(pingMessage).to.have.property('type', 'ping');",
                  "    pm.expect(pongMessage).to.have.property('type', 'pong');",
                  "    pm.expect(pongMessage).to.have.property('latency');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_type\": \"heartbeat_test\",\n  \"ping_message\": {\n    \"type\": \"ping\",\n    \"timestamp\": \"2024-01-15T10:30:00Z\"\n  },\n  \"pong_message\": {\n    \"type\": \"pong\",\n    \"timestamp\": \"2024-01-15T10:30:00.125Z\",\n    \"latency\": 125\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/ws/test/heartbeat",
              "host": ["{{base_url}}"],
              "path": ["ws", "test", "heartbeat"]
            }
          }
        }
      ]
    }
  ]
}
