version: '3.8'

services:
  # MAIN APPLICATION - Only starts if tests pass
  axiom-ai-center:
    build:
      context: .
      dockerfile: ${DOCKERFILE:-Dockerfile.test}
      target: production
    image: axiom-ai-center:latest
    container_name: axiom-ai-center
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
      - "${SERVER_PORT:-3001}:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3000}
      - SERVER_PORT=${SERVER_PORT:-3001}
      - HOST=${HOST:-0.0.0.0}
      - GITHUB_ORGANIZATION=${GITHUB_ORGANIZATION:-jamesenki}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - DEMO_MODE=${DEMO_MODE:-true}
      - BYPASS_AUTH=${BYPASS_AUTH:-true}
      - MONGODB_URI=${MONGODB_URI}
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:3001}
    volumes:
      - ./cloned-repositories:/app/cloned-repositories
      - ./repository-metadata.json:/app/repository-metadata.json
      - ./logs:/app/logs
      - ./cache:/app/cache
    networks:
      - axiom-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      test-runner:
        condition: service_completed_successfully

  # TEST RUNNER - MUST PASS before deployment
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: e2e-tester
    container_name: axiom-test-runner
    environment:
      - CI=true
      - NODE_ENV=test
    volumes:
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
      - ./playwright-report:/app/playwright-report
    networks:
      - axiom-network
    profiles:
      - test
      - deploy

  # Optional: MongoDB for persistent storage
  mongodb:
    image: mongo:6-jammy
    container_name: axiom-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-changeme}
      - MONGO_INITDB_DATABASE=axiom
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - axiom-network
    profiles:
      - with-mongo

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    container_name: axiom-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - axiom-network
    profiles:
      - with-redis

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: axiom-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - axiom-ai-center
    networks:
      - axiom-network
    profiles:
      - with-nginx

networks:
  axiom-network:
    driver: bridge

volumes:
  mongodb_data:
  mongodb_config:
  redis_data: