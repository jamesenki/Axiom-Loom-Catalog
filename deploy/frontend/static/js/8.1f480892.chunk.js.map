{"version":3,"file":"static/js/8.1f480892.chunk.js","mappings":"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","sources":["components/AllAPIsView.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSearchParams, Link, useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { \n  ArrowLeft,\n  Globe,\n  Database,\n  Server,\n  Search,\n  Filter,\n  ChevronRight,\n  AlertCircle\n} from 'lucide-react';\nimport {\n  Container,\n  Section,\n  H1,\n  H2,\n  H3,\n  Text,\n  Lead,\n  Button,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  Flex,\n  Grid,\n  Badge,\n  FullPageLoading,\n  Input\n} from './styled';\n\ninterface APIItem {\n  repository: string;\n  type: 'OpenAPI' | 'GraphQL' | 'gRPC';\n  name: string;\n  path: string;\n  version?: string;\n  description?: string;\n  services?: string[];\n  package?: string;\n}\n\nconst PageHeader = styled.div`\n  background: linear-gradient(135deg, ${props => props.theme.colors.primary.black} 0%, ${props => props.theme.colors.secondary.darkGray} 100%);\n  padding: ${props => props.theme.spacing[12]} 0;\n  margin-bottom: ${props => props.theme.spacing[8]};\n`;\n\nconst BackButton = styled(Button)`\n  margin-bottom: ${props => props.theme.spacing[6]};\n  background: transparent;\n  border: 1px solid ${props => props.theme.colors.primary.yellow};\n  color: ${props => props.theme.colors.primary.yellow};\n  \n  &:hover {\n    background: ${props => props.theme.colors.primary.yellow};\n    color: ${props => props.theme.colors.primary.black};\n  }\n`;\n\nconst SearchBar = styled.div`\n  position: relative;\n  margin-bottom: ${props => props.theme.spacing[6]};\n`;\n\nconst SearchInput = styled(Input)`\n  padding-left: ${props => props.theme.spacing[10]};\n  background: ${props => props.theme.colors.background.secondary};\n  border: 2px solid transparent;\n  \n  &:focus {\n    border-color: ${props => props.theme.colors.primary.yellow};\n  }\n`;\n\nconst SearchIcon = styled(Search)`\n  position: absolute;\n  left: ${props => props.theme.spacing[3]};\n  top: 50%;\n  transform: translateY(-50%);\n  color: ${props => props.theme.colors.text.secondary};\n`;\n\nconst FilterBar = styled(Flex)`\n  margin-bottom: ${props => props.theme.spacing[6]};\n  gap: ${props => props.theme.spacing[3]};\n  flex-wrap: wrap;\n`;\n\nconst FilterButton = styled(Button)<{ active?: boolean }>`\n  background: ${props => props.active ? props.theme.colors.primary.yellow : props.theme.colors.background.secondary};\n  color: ${props => props.active ? props.theme.colors.primary.black : props.theme.colors.text.primary};\n  border: 1px solid ${props => props.active ? props.theme.colors.primary.yellow : 'transparent'};\n  \n  &:hover {\n    background: ${props => props.theme.colors.primary.yellow};\n    color: ${props => props.theme.colors.primary.black};\n  }\n`;\n\nconst APICard = styled(Card)`\n  transition: all 0.3s ease;\n  cursor: pointer;\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n    border-color: ${props => props.theme.colors.primary.yellow};\n  }\n`;\n\nconst TypeIcon = ({ type }: { type: string }) => {\n  switch (type) {\n    case 'OpenAPI':\n      return <Globe size={20} />;\n    case 'GraphQL':\n      return <Database size={20} />;\n    case 'gRPC':\n      return <Server size={20} />;\n    default:\n      return <Globe size={20} />;\n  }\n};\n\nconst TypeBadge = styled(Badge)<{ type: string }>`\n  background: ${props => {\n    switch (props.type) {\n      case 'OpenAPI':\n        return props.theme.colors.status.warning;\n      case 'GraphQL':\n        return props.theme.colors.status.info;\n      case 'gRPC':\n        return props.theme.colors.status.success;\n      default:\n        return props.theme.colors.secondary.darkGray;\n    }\n  }};\n  color: ${props => props.theme.colors.text.primary};\n  display: inline-flex;\n  align-items: center;\n  gap: ${props => props.theme.spacing[1]};\n`;\n\nconst ErrorMessage = styled.div`\n  background: ${props => props.theme.colors.status.error}20;\n  border: 1px solid ${props => props.theme.colors.status.error};\n  padding: ${props => props.theme.spacing[4]};\n  border-radius: ${props => props.theme.borderRadius.md};\n  color: ${props => props.theme.colors.status.error};\n  display: flex;\n  align-items: center;\n  gap: ${props => props.theme.spacing[2]};\n  margin-bottom: ${props => props.theme.spacing[4]};\n`;\n\nconst AllAPIsView: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const typeFilter = searchParams.get('type');\n  \n  const [apis, setApis] = useState<APIItem[]>([]);\n  const [filteredApis, setFilteredApis] = useState<APIItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedType, setSelectedType] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchAllAPIs();\n    // When URL has a type filter, don't apply local filtering\n    if (typeFilter) {\n      setSelectedType(null);\n    }\n  }, [typeFilter]);\n\n  useEffect(() => {\n    filterAPIs();\n  }, [apis, searchQuery, selectedType]);\n\n  const fetchAllAPIs = async () => {\n    try {\n      setLoading(true);\n      const url = typeFilter \n        ? `/api/api-explorer/all?type=${typeFilter}`\n        : '/api/api-explorer/all';\n        \n      const response = await fetch(url, {\n        headers: {\n          'x-dev-mode': 'true'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch APIs');\n      }\n      const data = await response.json();\n      setApis(data.apis || []);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterAPIs = () => {\n    let filtered = apis;\n    \n    if (searchQuery) {\n      filtered = filtered.filter(api => \n        api.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        api.repository.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        api.description?.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n    \n    // Don't filter by type if we already got filtered results from the API\n    if (selectedType && !typeFilter) {\n      filtered = filtered.filter(api => api.type === selectedType);\n    }\n    \n    setFilteredApis(filtered);\n  };\n\n  const handleTypeFilter = (type: string | null) => {\n    setSelectedType(type);\n    if (type) {\n      navigate(`/api-explorer/all?type=${type.toLowerCase()}`);\n    } else {\n      navigate('/api-explorer/all');\n    }\n  };\n\n  const navigateToAPI = (api: APIItem) => {\n    navigate(`/api-explorer/${api.repository}#${api.path}`);\n  };\n\n  if (loading) return <FullPageLoading />;\n\n  return (\n    <div>\n      <PageHeader>\n        <Container>\n          <BackButton as={Link} to=\"/\" size=\"sm\">\n            <ArrowLeft size={16} />\n            Back to Dashboard\n          </BackButton>\n          <H1>API Explorer</H1>\n          <Lead>Discover and explore all available APIs across repositories</Lead>\n        </Container>\n      </PageHeader>\n\n      <Container>\n        <Section>\n          {error && (\n            <ErrorMessage>\n              <AlertCircle size={20} />\n              <span>Error Loading APIs: {error}</span>\n            </ErrorMessage>\n          )}\n\n          <SearchBar>\n            <SearchIcon size={20} />\n            <SearchInput\n              type=\"text\"\n              placeholder=\"Search APIs by name, repository, or description...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n            />\n          </SearchBar>\n\n          <FilterBar>\n            <FilterButton\n              size=\"sm\"\n              active={!selectedType}\n              onClick={() => handleTypeFilter(null)}\n            >\n              <Filter size={16} />\n              All Types\n            </FilterButton>\n            <FilterButton\n              size=\"sm\"\n              active={selectedType === 'OpenAPI'}\n              onClick={() => handleTypeFilter('OpenAPI')}\n            >\n              <Globe size={16} />\n              OpenAPI\n            </FilterButton>\n            <FilterButton\n              size=\"sm\"\n              active={selectedType === 'GraphQL'}\n              onClick={() => handleTypeFilter('GraphQL')}\n            >\n              <Database size={16} />\n              GraphQL\n            </FilterButton>\n            <FilterButton\n              size=\"sm\"\n              active={selectedType === 'gRPC'}\n              onClick={() => handleTypeFilter('gRPC')}\n            >\n              <Server size={16} />\n              gRPC\n            </FilterButton>\n          </FilterBar>\n\n          <H2>\n            {filteredApis.length} {selectedType || typeFilter?.toUpperCase() || 'Total'} APIs Found\n          </H2>\n\n          <Grid columns={1} gap=\"medium\">\n            {filteredApis.map((api, index) => (\n              <APICard key={`${api.repository}-${api.path}-${index}`} onClick={() => navigateToAPI(api)}>\n                <CardHeader>\n                  <Flex justify=\"between\" align=\"start\">\n                    <div>\n                      <CardTitle>{api.name}</CardTitle>\n                      <Text size=\"small\" style={{ color: 'var(--text-muted)' }}>{api.repository}</Text>\n                    </div>\n                    <TypeBadge type={api.type}>\n                      <TypeIcon type={api.type} />\n                      {api.type}\n                    </TypeBadge>\n                  </Flex>\n                </CardHeader>\n                <CardContent>\n                  {api.description && (\n                    <CardDescription>{api.description}</CardDescription>\n                  )}\n                  <Flex justify=\"between\" align=\"center\" style={{ marginTop: '1rem' }}>\n                    <Text size=\"small\" style={{ color: 'var(--text-muted)' }}>{api.path}</Text>\n                    {api.version && <Badge variant=\"secondary\">v{api.version}</Badge>}\n                  </Flex>\n                  {api.services && api.services.length > 0 && (\n                    <div style={{ marginTop: '0.5rem' }}>\n                      <Text size=\"small\" style={{ color: 'var(--text-muted)' }}>\n                        Services: {api.services.join(', ')}\n                      </Text>\n                    </div>\n                  )}\n                </CardContent>\n              </APICard>\n            ))}\n          </Grid>\n\n          {filteredApis.length === 0 && !loading && (\n            <Card>\n              <CardContent>\n                <Flex direction=\"column\" align=\"center\" justify=\"center\" style={{ padding: '2rem' }}>\n                  <AlertCircle size={48} style={{ marginBottom: '1rem', opacity: 0.5 }} />\n                  <H3>No APIs Found</H3>\n                  <Text style={{ color: 'var(--text-muted)' }}>\n                    {searchQuery || selectedType\n                      ? 'Try adjusting your filters or search terms'\n                      : 'No APIs detected in the repositories'}\n                  </Text>\n                </Flex>\n              </CardContent>\n            </Card>\n          )}\n        </Section>\n      </Container>\n    </div>\n  );\n};\n\nexport default AllAPIsView;"],"names":["PageHeader","styled","div","props","theme","colors","primary","black","secondary","darkGray","spacing","BackButton","Button","yellow","SearchBar","SearchInput","Input","background","SearchIcon","Search","text","FilterBar","Flex","FilterButton","active","APICard","Card","TypeIcon","_ref","type","_jsx","Globe","size","Database","Server","TypeBadge","Badge","status","warning","info","success","ErrorMessage","error","borderRadius","md","AllAPIsView","searchParams","useSearchParams","navigate","useNavigate","typeFilter","get","apis","setApis","useState","filteredApis","setFilteredApis","loading","setLoading","setError","searchQuery","setSearchQuery","selectedType","setSelectedType","useEffect","fetchAllAPIs","filterAPIs","async","url","response","fetch","headers","ok","Error","data","json","err","message","filtered","filter","api","_api$description","name","toLowerCase","includes","repository","description","handleTypeFilter","FullPageLoading","_jsxs","children","Container","as","Link","to","ArrowLeft","H1","Lead","Section","AlertCircle","placeholder","value","onChange","e","target","onClick","Filter","H2","length","toUpperCase","Grid","columns","gap","map","index","path","navigateToAPI","CardHeader","justify","align","CardTitle","Text","style","color","CardContent","CardDescription","marginTop","version","variant","services","join","direction","padding","marginBottom","opacity","H3"],"sourceRoot":""}