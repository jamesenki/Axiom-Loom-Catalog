{"version":3,"file":"static/js/864.3d6af667.chunk.js","mappings":"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","sources":["components/RepositorySync.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { repositorySyncService, SyncResult } from '../services/repositorySync';\nimport { useSyncContext } from '../contexts/SyncContext';\n\ninterface SyncProgress {\n  isRunning: boolean;\n  currentRepo?: string;\n  totalRepos: number;\n  completedRepos: number;\n  percentage: number;\n  errors: string[];\n}\n\nconst RepositorySync: React.FC = () => {\n  const [syncProgress, setSyncProgress] = useState<SyncProgress>({\n    isRunning: false,\n    totalRepos: 0,\n    completedRepos: 0,\n    percentage: 0,\n    errors: []\n  });\n  const [lastSyncResult, setLastSyncResult] = useState<SyncResult | null>(null);\n  const [showDetails, setShowDetails] = useState(false);\n  const [limitSync, setLimitSync] = useState(true); // Default to limited sync for testing\n  const { updateSyncResult } = useSyncContext();\n\n  // Load last sync info on mount\n  useEffect(() => {\n    const lastSync = repositorySyncService.getLastSyncInfo();\n    if (lastSync.result && lastSync.timestamp) {\n      setLastSyncResult({\n        ...lastSync.result,\n        timestamp: lastSync.timestamp\n      });\n    }\n  }, []);\n\n  const handleManualSync = async () => {\n    if (syncProgress.isRunning) return;\n\n    setSyncProgress({\n      isRunning: true,\n      totalRepos: 0,\n      completedRepos: 0,\n      percentage: 0,\n      errors: []\n    });\n    setShowDetails(true);\n\n    try {\n      // Set up progress monitoring\n      const progressInterval = setInterval(async () => {\n        const status = await repositorySyncService.getSyncStatus();\n        setSyncProgress({\n          isRunning: status.isInProgress,\n          currentRepo: status.currentRepository,\n          totalRepos: status.totalRepositories,\n          completedRepos: status.completedRepositories,\n          percentage: status.totalRepositories > 0 \n            ? Math.round((status.completedRepositories / status.totalRepositories) * 100)\n            : 0,\n          errors: status.errors\n        });\n      }, 500);\n\n      // Start sync with optional limit\n      const result = await repositorySyncService.startSync(limitSync ? 10 : undefined);\n      \n      // Clear progress monitoring\n      clearInterval(progressInterval);\n      \n      // Save and update results\n      repositorySyncService.saveLastSyncInfo(result);\n      setLastSyncResult(result);\n      updateSyncResult(result);\n      \n      // Final progress update\n      setSyncProgress(prev => ({\n        ...prev,\n        isRunning: false,\n        percentage: 100,\n        completedRepos: prev.totalRepos\n      }));\n\n    } catch (error) {\n      console.error('Sync failed:', error);\n      setSyncProgress(prev => ({\n        ...prev,\n        isRunning: false,\n        errors: [...prev.errors, error instanceof Error ? error.message : 'Unknown error']\n      }));\n    }\n  };\n\n  const formatDuration = (ms: number): string => {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return minutes > 0 \n      ? `${minutes}m ${remainingSeconds}s`\n      : `${seconds}s`;\n  };\n\n  const formatDate = (date: Date | string): string => {\n    try {\n      const dateObj = date instanceof Date ? date : new Date(date);\n      if (isNaN(dateObj.getTime())) {\n        return 'Never';\n      }\n      return new Intl.DateTimeFormat('en-US', {\n        dateStyle: 'medium',\n        timeStyle: 'short'\n      }).format(dateObj);\n    } catch (error) {\n      return 'Never';\n    }\n  };\n\n  return (\n    <div className=\"repository-sync p-8 max-w-4xl mx-auto\">\n      <div className=\"mb-8\">\n        <Link to=\"/\" className=\"text-blue-400 hover:text-blue-300 mb-4 inline-block\">\n          ‚Üê Back to Repositories\n        </Link>\n        <h1 className=\"text-3xl font-bold text-white mb-4\">üîÑ Repository Sync</h1>\n        <p className=\"text-gray-300\">\n          Synchronize all repositories from the GitHub account to ensure you have the latest content.\n        </p>\n      </div>\n\n      {/* Sync Button and Status */}\n      <div className=\"bg-gray-800 rounded-lg p-6 mb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-white mb-2\">Manual Sync</h2>\n            {lastSyncResult && (\n              <p className=\"text-sm text-gray-400\">\n                Last sync: {formatDate(lastSyncResult.timestamp)}\n              </p>\n            )}\n            <label className=\"flex items-center gap-2 mt-2\">\n              <input\n                type=\"checkbox\"\n                checked={limitSync}\n                onChange={(e) => setLimitSync(e.target.checked)}\n                disabled={syncProgress.isRunning}\n                className=\"rounded border-gray-600 bg-gray-700 text-blue-500\"\n              />\n              <span className=\"text-sm text-gray-300\">\n                Limit to 10 repositories (faster testing)\n              </span>\n            </label>\n          </div>\n          <button\n            onClick={handleManualSync}\n            disabled={syncProgress.isRunning}\n            className={`px-6 py-3 rounded-lg font-medium transition-all ${\n              syncProgress.isRunning\n                ? 'bg-gray-600 cursor-not-allowed'\n                : 'bg-blue-600 hover:bg-blue-700 active:scale-95'\n            } text-white`}\n          >\n            {syncProgress.isRunning ? (\n              <span className=\"flex items-center\">\n                <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n                Syncing...\n              </span>\n            ) : (\n              'üîÑ Start Sync'\n            )}\n          </button>\n        </div>\n\n        {/* Progress Bar */}\n        {(syncProgress.isRunning || syncProgress.percentage > 0) && (\n          <div className=\"mb-4\">\n            <div className=\"flex items-center justify-between text-sm text-gray-400 mb-2\">\n              <span>{syncProgress.completedRepos} / {syncProgress.totalRepos} repositories</span>\n              <span>{syncProgress.percentage}%</span>\n            </div>\n            <div className=\"w-full bg-gray-700 rounded-full h-3 overflow-hidden\">\n              <div \n                className=\"bg-blue-500 h-full transition-all duration-300 ease-out\"\n                style={{ width: `${syncProgress.percentage}%` }}\n              />\n            </div>\n            {syncProgress.currentRepo && (\n              <p className=\"text-sm text-gray-400 mt-2\">\n                Currently syncing: <span className=\"text-white\">{syncProgress.currentRepo}</span>\n              </p>\n            )}\n          </div>\n        )}\n\n        {/* Errors */}\n        {syncProgress.errors.length > 0 && (\n          <div className=\"bg-red-900/20 border border-red-800 rounded-lg p-4 mt-4\">\n            <h3 className=\"text-red-400 font-semibold mb-2\">Errors encountered:</h3>\n            <ul className=\"text-sm text-red-300 space-y-1\">\n              {syncProgress.errors.map((error, index) => (\n                <li key={index}>‚Ä¢ {error}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n\n      {/* Last Sync Results */}\n      {lastSyncResult && (\n        <div className=\"bg-gray-800 rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold text-white\">Last Sync Results</h2>\n            <button\n              onClick={() => setShowDetails(!showDetails)}\n              className=\"text-blue-400 hover:text-blue-300 text-sm\"\n            >\n              {showDetails ? 'Hide' : 'Show'} Details\n            </button>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n            <div className=\"bg-gray-700/50 rounded-lg p-4\">\n              <p className=\"text-gray-400 text-sm mb-1\">Status</p>\n              <p className={`text-lg font-semibold ${\n                lastSyncResult.success ? 'text-green-400' : 'text-red-400'\n              }`}>\n                {lastSyncResult.success ? '‚úÖ Success' : '‚ùå Failed'}\n              </p>\n            </div>\n            <div className=\"bg-gray-700/50 rounded-lg p-4\">\n              <p className=\"text-gray-400 text-sm mb-1\">Synced Repositories</p>\n              <p className=\"text-lg font-semibold text-white\">\n                {lastSyncResult.syncedRepositories.length}\n              </p>\n            </div>\n            <div className=\"bg-gray-700/50 rounded-lg p-4\">\n              <p className=\"text-gray-400 text-sm mb-1\">Duration</p>\n              <p className=\"text-lg font-semibold text-white\">\n                {formatDuration(lastSyncResult.totalTime)}\n              </p>\n            </div>\n          </div>\n\n          {showDetails && (\n            <>\n              {/* Synced Repositories */}\n              {lastSyncResult.syncedRepositories.length > 0 && (\n                <div className=\"mt-6\">\n                  <h3 className=\"text-lg font-semibold text-white mb-3\">\n                    Synced Repositories ({lastSyncResult.syncedRepositories.length})\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {lastSyncResult.syncedRepositories.map((repo) => (\n                      <div key={repo} className=\"bg-gray-700/30 rounded px-3 py-2\">\n                        <span className=\"text-green-400 mr-2\">‚úì</span>\n                        <span className=\"text-gray-300\">{repo}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Failed Repositories */}\n              {lastSyncResult.failedRepositories.length > 0 && (\n                <div className=\"mt-6\">\n                  <h3 className=\"text-lg font-semibold text-red-400 mb-3\">\n                    Failed Repositories ({lastSyncResult.failedRepositories.length})\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {lastSyncResult.failedRepositories.map((failure) => (\n                      <div key={failure.name} className=\"bg-red-900/20 border border-red-800 rounded p-3\">\n                        <p className=\"text-red-300 font-medium\">{failure.name}</p>\n                        <p className=\"text-red-400 text-sm mt-1\">{failure.error}</p>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      )}\n\n      {/* Instructions */}\n      <div className=\"mt-8 bg-blue-900/20 border border-blue-800 rounded-lg p-6\">\n        <h3 className=\"text-blue-400 font-semibold mb-3\">‚ÑπÔ∏è Sync Information</h3>\n        <ul className=\"text-blue-300 space-y-2 text-sm\">\n          <li>‚Ä¢ Sync will update all existing repositories and clone any new ones</li>\n          <li>‚Ä¢ The process may take several minutes depending on repository sizes</li>\n          <li>‚Ä¢ Failed syncs for individual repositories won't stop the overall process</li>\n          <li>‚Ä¢ Repositories are automatically synced when the application starts</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default RepositorySync;"],"names":["RepositorySync","syncProgress","setSyncProgress","useState","isRunning","totalRepos","completedRepos","percentage","errors","lastSyncResult","setLastSyncResult","showDetails","setShowDetails","limitSync","setLimitSync","updateSyncResult","useSyncContext","useEffect","lastSync","repositorySyncService","getLastSyncInfo","result","timestamp","_jsxs","className","children","_jsx","Link","to","date","dateObj","Date","isNaN","getTime","Intl","DateTimeFormat","dateStyle","timeStyle","format","error","formatDate","type","checked","onChange","e","target","disabled","onClick","async","progressInterval","setInterval","status","getSyncStatus","isInProgress","currentRepo","currentRepository","totalRepositories","completedRepositories","Math","round","startSync","undefined","clearInterval","saveLastSyncInfo","prev","Error","message","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","style","width","length","map","index","success","syncedRepositories","ms","seconds","floor","minutes","formatDuration","totalTime","_Fragment","repo","failedRepositories","failure","name"],"sourceRoot":""}