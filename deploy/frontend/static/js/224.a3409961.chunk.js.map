{"version":3,"file":"static/js/224.a3409961.chunk.js","mappings":"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","sources":["webpack://axiom-loom-catalog/./src/components/EnhancedMarkdownViewer.module.css?c132","components/PlantUmlDiagram.tsx","components/MermaidDiagram.tsx","components/EnhancedMarkdownViewer.tsx","hooks/usePlantUmlRenderer.ts","webpack://axiom-loom-catalog/./src/components/DocumentationView.module.css?73bf","components/DocumentationView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"enhancedMarkdownViewer\":\"EnhancedMarkdownViewer_enhancedMarkdownViewer__Kusk0\",\"markdownToolbar\":\"EnhancedMarkdownViewer_markdownToolbar__B0D59\",\"toolbarLeft\":\"EnhancedMarkdownViewer_toolbarLeft__Q4D5r\",\"toolbarRight\":\"EnhancedMarkdownViewer_toolbarRight__eotXM\",\"toolbarButton\":\"EnhancedMarkdownViewer_toolbarButton__x4YEh\",\"searchBar\":\"EnhancedMarkdownViewer_searchBar__P+Q1J\",\"searchInput\":\"EnhancedMarkdownViewer_searchInput__4biHm\",\"searchControls\":\"EnhancedMarkdownViewer_searchControls__Nmw+P\",\"searchResults\":\"EnhancedMarkdownViewer_searchResults__G1FRl\",\"searchNavButton\":\"EnhancedMarkdownViewer_searchNavButton__w5v69\",\"searchCloseButton\":\"EnhancedMarkdownViewer_searchCloseButton__8BpFs\",\"markdownContentWrapper\":\"EnhancedMarkdownViewer_markdownContentWrapper__nVTFD\",\"markdownToc\":\"EnhancedMarkdownViewer_markdownToc__E2pIa\",\"tocItem\":\"EnhancedMarkdownViewer_tocItem__I2Lo1\",\"markdownContent\":\"EnhancedMarkdownViewer_markdownContent__7MPfW\",\"active\":\"EnhancedMarkdownViewer_active__D-pKM\",\"printing\":\"EnhancedMarkdownViewer_printing__nFfo9\"};","/**\n * PlantUML Diagram Component\n * \n * Renders PlantUML diagrams by sending content to backend API\n * Supports caching and error handling\n */\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { AlertCircle, Loader2, RefreshCw, Download } from 'lucide-react';\nimport { getApiUrl } from '../utils/apiConfig';\n\ninterface PlantUmlDiagramProps {\n  content: string;\n  title?: string;\n  format?: 'svg' | 'png';\n  className?: string;\n  onError?: (error: Error) => void;\n}\n\nexport const PlantUmlDiagram: React.FC<PlantUmlDiagramProps> = ({\n  content,\n  title,\n  format = 'svg',\n  className = '',\n  onError\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [diagramUrl, setDiagramUrl] = useState<string | null>(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  useEffect(() => {\n    renderDiagram();\n\n    return () => {\n      // Cleanup: abort any pending requests\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n      // Revoke object URL to free memory\n      if (diagramUrl) {\n        URL.revokeObjectURL(diagramUrl);\n      }\n    };\n  }, [content, format, retryCount]);\n\n  const renderDiagram = async () => {\n    if (!content || !content.trim()) {\n      setError('No PlantUML content provided');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    // Create new abort controller for this request\n    abortControllerRef.current = new AbortController();\n\n    try {\n      const response = await fetch(getApiUrl('/api/plantuml/render'), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ content, format }),\n        signal: abortControllerRef.current.signal\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to render diagram');\n      }\n\n      // Get the blob from response\n      const blob = await response.blob();\n      \n      // Create object URL for the blob\n      const url = URL.createObjectURL(blob);\n      \n      // Revoke previous URL if exists\n      if (diagramUrl) {\n        URL.revokeObjectURL(diagramUrl);\n      }\n      \n      setDiagramUrl(url);\n    } catch (err) {\n      if (err instanceof Error) {\n        if (err.name === 'AbortError') {\n          // Request was aborted, don't set error\n          return;\n        }\n        setError(err.message);\n        onError?.(err);\n      } else {\n        setError('An unexpected error occurred');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRetry = () => {\n    setRetryCount(prev => prev + 1);\n  };\n\n  const handleDownload = () => {\n    if (!diagramUrl) return;\n\n    const link = document.createElement('a');\n    link.href = diagramUrl;\n    link.download = `${title || 'diagram'}.${format}`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const validatePlantUml = async () => {\n    try {\n      const response = await fetch(getApiUrl('/api/plantuml/validate'), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ content })\n      });\n\n      const result = await response.json();\n      if (!result.valid) {\n        setError(result.error || 'Invalid PlantUML syntax');\n      }\n    } catch (err) {\n      console.error('Validation error:', err);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={`flex items-center justify-center p-8 bg-gray-50 rounded-lg ${className}`}>\n        <Loader2 className=\"w-6 h-6 animate-spin text-blue-500 mr-2\" />\n        <span className=\"text-gray-600\">Rendering diagram...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`p-4 bg-red-50 border border-red-200 rounded-lg ${className}`}>\n        <div className=\"flex items-start\">\n          <AlertCircle className=\"w-5 h-5 text-red-500 mr-2 flex-shrink-0 mt-0.5\" />\n          <div className=\"flex-grow\">\n            <p className=\"text-red-700 font-medium\">Failed to render diagram</p>\n            <p className=\"text-red-600 text-sm mt-1\">{error}</p>\n            {content.includes('@startuml') && content.includes('@enduml') ? (\n              <button\n                onClick={handleRetry}\n                className=\"mt-2 inline-flex items-center px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-1\" />\n                Retry\n              </button>\n            ) : (\n              <p className=\"text-red-600 text-xs mt-2\">\n                Tip: PlantUML diagrams must start with @startuml and end with @enduml\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!diagramUrl) {\n    return (\n      <div className={`p-8 bg-gray-50 rounded-lg text-center ${className}`}>\n        <p className=\"text-gray-500\">No diagram to display</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-white rounded-lg shadow-sm ${className}`}>\n      {title && (\n        <div className=\"flex items-center justify-between px-4 py-2 border-b bg-gray-50\">\n          <h3 className=\"text-sm font-medium text-gray-700\">{title}</h3>\n          <button\n            onClick={handleDownload}\n            className=\"inline-flex items-center px-2 py-1 text-xs text-gray-600 hover:text-gray-800\"\n            title=\"Download diagram\"\n          >\n            <Download className=\"w-4 h-4\" />\n          </button>\n        </div>\n      )}\n      <div className=\"p-4 overflow-auto\">\n        {format === 'svg' ? (\n          <div \n            className=\"inline-block\"\n            dangerouslySetInnerHTML={{ \n              __html: `<img src=\"${diagramUrl}\" alt=\"${title || 'PlantUML Diagram'}\" />` \n            }}\n          />\n        ) : (\n          <img \n            src={diagramUrl} \n            alt={title || 'PlantUML Diagram'}\n            className=\"max-w-full h-auto\"\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PlantUmlDiagram;","/**\n * Mermaid Diagram Component\n * \n * Renders Mermaid diagrams using mermaid.js\n * Supports various diagram types including flowcharts, sequence diagrams, etc.\n */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { AlertCircle, Download, Loader2 } from 'lucide-react';\n\n// Dynamic import to avoid SSR issues\nlet mermaidAPI: any = null;\n\ninterface MermaidDiagramProps {\n  content: string;\n  title?: string;\n  className?: string;\n  theme?: 'default' | 'dark' | 'forest' | 'neutral';\n  onError?: (error: Error) => void;\n}\n\nexport const MermaidDiagram: React.FC<MermaidDiagramProps> = ({\n  content,\n  title,\n  className = '',\n  theme = 'default',\n  onError\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [svgContent, setSvgContent] = useState<string | null>(null);\n  const [isMermaidReady, setIsMermaidReady] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const renderIdRef = useRef<string>(`mermaid-${Date.now()}-${Math.random()}`);\n\n  useEffect(() => {\n    loadMermaid();\n  }, []);\n\n  useEffect(() => {\n    if (isMermaidReady && content) {\n      renderDiagram();\n    }\n  }, [content, theme, isMermaidReady]);\n\n  const loadMermaid = async () => {\n    try {\n      if (!mermaidAPI) {\n        // Using CDN for simplicity - in production, install via npm\n        const script = document.createElement('script');\n        script.src = 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js';\n        script.async = true;\n        \n        await new Promise((resolve, reject) => {\n          script.onload = resolve;\n          script.onerror = reject;\n          document.body.appendChild(script);\n        });\n\n        // Initialize mermaid\n        const mermaid = (window as any).mermaid;\n        mermaid.initialize({\n          startOnLoad: false,\n          theme: theme,\n          securityLevel: 'loose',\n          fontFamily: 'monospace',\n          flowchart: {\n            useMaxWidth: true,\n            htmlLabels: true,\n            curve: 'basis'\n          },\n          sequence: {\n            diagramMarginX: 50,\n            diagramMarginY: 10,\n            useMaxWidth: true\n          },\n          gantt: {\n            numberSectionStyles: 4,\n            axisFormat: '%Y-%m-%d'\n          }\n        });\n        \n        mermaidAPI = mermaid.mermaidAPI;\n      } else {\n        // Mermaid already loaded\n      }\n      \n      setLoading(false);\n      setIsMermaidReady(true);\n    } catch (err) {\n      setError('Failed to load Mermaid library');\n      setLoading(false);\n      if (err instanceof Error) {\n        onError?.(err);\n      }\n    }\n  };\n\n  const renderDiagram = async () => {\n    if (!content || !containerRef.current) return;\n\n    setError(null);\n    \n    try {\n      // Clear previous content\n      if (containerRef.current) {\n        containerRef.current.innerHTML = '';\n      }\n\n      // Generate a unique ID for this render\n      const uniqueId = `mermaid-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n      // Render the diagram\n      const { svg } = await mermaidAPI.render(uniqueId, content);\n      setSvgContent(svg);\n      \n      if (containerRef.current) {\n        containerRef.current.innerHTML = svg;\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to render diagram';\n      setError(errorMessage);\n      console.error('Mermaid rendering error:', err);\n      console.error('Diagram content:', content);\n      \n      // Try to provide more helpful error messages\n      if (errorMessage.includes('parse')) {\n        setError('Invalid diagram syntax. Please check your Mermaid code.');\n      }\n      \n      if (err instanceof Error) {\n        onError?.(err);\n      }\n    }\n  };\n\n  const handleDownload = () => {\n    if (!svgContent) return;\n\n    const blob = new Blob([svgContent], { type: 'image/svg+xml' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `${title || 'diagram'}.svg`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  if (loading) {\n    return (\n      <div className={`flex items-center justify-center p-8 bg-gray-50 rounded-lg ${className}`}>\n        <Loader2 className=\"w-6 h-6 animate-spin text-blue-500 mr-2\" />\n        <span className=\"text-gray-600\">Loading Mermaid...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`p-4 bg-red-50 border border-red-200 rounded-lg ${className}`}>\n        <div className=\"flex items-start\">\n          <AlertCircle className=\"w-5 h-5 text-red-500 mr-2 flex-shrink-0 mt-0.5\" />\n          <div className=\"flex-grow\">\n            <p className=\"text-red-700 font-medium\">Failed to render Mermaid diagram</p>\n            <p className=\"text-red-600 text-sm mt-1\">{error}</p>\n            <details className=\"mt-2\">\n              <summary className=\"text-red-600 text-xs cursor-pointer\">View diagram source</summary>\n              <pre className=\"mt-2 p-2 bg-red-100 rounded text-xs overflow-auto\">\n                {content}\n              </pre>\n            </details>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-white rounded-lg shadow-sm ${className}`}>\n      {title && (\n        <div className=\"flex items-center justify-between px-4 py-2 border-b bg-gray-50\">\n          <h3 className=\"text-sm font-medium text-gray-700\">{title}</h3>\n          <button\n            onClick={handleDownload}\n            className=\"inline-flex items-center px-2 py-1 text-xs text-gray-600 hover:text-gray-800\"\n            title=\"Download diagram\"\n            disabled={!svgContent}\n          >\n            <Download className=\"w-4 h-4\" />\n          </button>\n        </div>\n      )}\n      <div \n        ref={containerRef}\n        className=\"p-4 overflow-auto mermaid-container\"\n        style={{ minHeight: '200px' }}\n      />\n    </div>\n  );\n};\n\n// Mermaid syntax validator\nexport const validateMermaidSyntax = (content: string): { valid: boolean; error?: string } => {\n  const trimmed = content.trim();\n  \n  if (!trimmed) {\n    return { valid: false, error: 'Empty diagram content' };\n  }\n  \n  // Check for common diagram types\n  const validStarts = [\n    'graph', 'flowchart', 'sequenceDiagram', 'classDiagram', \n    'stateDiagram', 'erDiagram', 'journey', 'gantt', 'pie',\n    'gitGraph', 'mindmap', 'timeline'\n  ];\n  \n  const hasValidStart = validStarts.some(start => \n    trimmed.startsWith(start) || trimmed.includes(`\\n${start}`)\n  );\n  \n  if (!hasValidStart) {\n    return { \n      valid: false, \n      error: 'Diagram must start with a valid type (e.g., graph, flowchart, sequenceDiagram)' \n    };\n  }\n  \n  return { valid: true };\n};\n\nexport default MermaidDiagram;","/**\n * Enhanced Markdown Viewer Component\n * \n * Features:\n * - Syntax highlighting for code blocks\n * - Table of contents generation\n * - Search within documents\n * - Print/export functionality\n * - Mobile-responsive design\n */\n\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeHighlight from 'rehype-highlight';\nimport rehypeSlug from 'rehype-slug';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport { Components } from 'react-markdown';\nimport 'highlight.js/styles/github-dark.css';\nimport styles from './EnhancedMarkdownViewer.module.css';\nimport { PlantUmlDiagram } from './PlantUmlDiagram';\nimport { usePlantUmlRenderer } from '../hooks/usePlantUmlRenderer';\nimport { MermaidDiagram } from './MermaidDiagram';\n\ninterface EnhancedMarkdownViewerProps {\n  content: string;\n  className?: string;\n  onContentChange?: (content: string) => void;\n  onNavigate?: (path: string) => void;\n}\n\ninterface TocItem {\n  id: string;\n  text: string;\n  level: number;\n}\n\nexport const EnhancedMarkdownViewer: React.FC<EnhancedMarkdownViewerProps> = ({\n  content,\n  className = '',\n  onContentChange,\n  onNavigate\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showSearch, setShowSearch] = useState(false);\n  const [showToc, setShowToc] = useState(true);\n  const [highlightedContent, setHighlightedContent] = useState(content);\n  const [searchResults, setSearchResults] = useState<number>(0);\n  const [currentMatch, setCurrentMatch] = useState<number>(0);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const [isPrinting, setIsPrinting] = useState(false);\n  \n  // Process PlantUML content\n  const { blocks: plantUmlBlocks, processedContent: plantUmlProcessed, hasPlantUml } = usePlantUmlRenderer(content);\n  \n  // Don't process Mermaid content with the hook since we handle it directly in the code component\n  // This was causing double processing and content corruption\n  const mermaidBlocks: any[] = [];\n  const hasMermaid = false;\n  \n  // Determine final processed content\n  const finalProcessedContent = hasPlantUml ? plantUmlProcessed : content;\n\n  // Generate table of contents from content\n  const tocItems = useMemo((): TocItem[] => {\n    const headingRegex = /^(#{1,6})\\s+(.+)$/gm;\n    const items: TocItem[] = [];\n    let match: RegExpExecArray | null;\n\n    while ((match = headingRegex.exec(content)) !== null) {\n      const level = match[1].length;\n      const text = match[2].trim();\n      const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n      items.push({ id, text, level });\n    }\n\n    return items;\n  }, [content]);\n\n  // Handle search functionality\n  useEffect(() => {\n    if (!searchTerm) {\n      setHighlightedContent(content);\n      setSearchResults(0);\n      setCurrentMatch(0);\n      return;\n    }\n\n    const regex = new RegExp(`(${searchTerm})`, 'gi');\n    const matches = content.match(regex) || [];\n    setSearchResults(matches.length);\n\n    if (matches.length > 0) {\n      let matchIndex = 0;\n      const highlighted = content.replace(regex, (match) => {\n        matchIndex++;\n        return `<mark class=\"${matchIndex === currentMatch + 1 ? 'current-match' : 'search-match'}\">${match}</mark>`;\n      });\n      setHighlightedContent(highlighted);\n    } else {\n      setHighlightedContent(content);\n    }\n  }, [content, searchTerm, currentMatch]);\n\n  // Navigate to next/previous search result\n  const navigateSearch = (direction: 'next' | 'prev') => {\n    if (searchResults === 0) return;\n\n    let newMatch = currentMatch;\n    if (direction === 'next') {\n      newMatch = (currentMatch + 1) % searchResults;\n    } else {\n      newMatch = (currentMatch - 1 + searchResults) % searchResults;\n    }\n    setCurrentMatch(newMatch);\n\n    // Scroll to match\n    const marks = contentRef.current?.querySelectorAll('mark');\n    if (marks && marks[newMatch]) {\n      marks[newMatch].scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n  };\n\n  // Handle keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.ctrlKey || e.metaKey) && e.key === 'f') {\n        e.preventDefault();\n        setShowSearch(!showSearch);\n      }\n      if ((e.ctrlKey || e.metaKey) && e.key === 'p') {\n        e.preventDefault();\n        handlePrint();\n      }\n      if (showSearch && e.key === 'Enter') {\n        if (e.shiftKey) {\n          navigateSearch('prev');\n        } else {\n          navigateSearch('next');\n        }\n      }\n      if (showSearch && e.key === 'Escape') {\n        setShowSearch(false);\n        setSearchTerm('');\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [showSearch, searchResults, currentMatch]);\n\n  // Handle printing\n  const handlePrint = () => {\n    setIsPrinting(true);\n    setTimeout(() => {\n      window.print();\n      setIsPrinting(false);\n    }, 100);\n  };\n\n  // Handle export as HTML\n  const handleExport = () => {\n    const htmlContent = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exported Markdown</title>\n  <style>\n    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 900px; margin: 0 auto; padding: 20px; }\n    pre { background: #f4f4f4; padding: 1em; overflow-x: auto; }\n    code { background: #f4f4f4; padding: 0.2em 0.4em; border-radius: 3px; }\n    blockquote { border-left: 4px solid #ddd; margin: 0; padding-left: 1em; color: #666; }\n    table { border-collapse: collapse; width: 100%; }\n    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n    th { background-color: #f4f4f4; }\n    @media print { body { max-width: none; } }\n  </style>\n</head>\n<body>\n  ${contentRef.current?.innerHTML || ''}\n</body>\n</html>`;\n\n    const blob = new Blob([htmlContent], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'markdown-export.html';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  // Scroll to heading\n  const scrollToHeading = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    }\n  };\n\n  // Custom components for react-markdown\n  const components: Components = {\n    a: ({ href, children, ...props }) => {\n      // Handle internal markdown links\n      if (href && !href.startsWith('http') && !href.startsWith('#')) {\n        // This is a relative link to another markdown file\n        const handleClick = (e: React.MouseEvent) => {\n          e.preventDefault();\n          if (onNavigate) {\n            // Remove .md extension if present\n            const path = href.replace(/\\.md$/i, '');\n            onNavigate(path);\n          }\n        };\n        return <a href={href} onClick={handleClick} {...props}>{children}</a>;\n      }\n      // External links open in new tab\n      if (href && href.startsWith('http')) {\n        return <a href={href} target=\"_blank\" rel=\"noopener noreferrer\" {...props}>{children}</a>;\n      }\n      // Default link behavior (including anchor links)\n      return <a href={href} {...props}>{children}</a>;\n    },\n    h1: ({ children, ...props }) => {\n      const id = children?.toString().toLowerCase().replace(/[^a-z0-9]+/g, '-');\n      return <h1 id={id} {...props}>{children}</h1>;\n    },\n    h2: ({ children, ...props }) => {\n      const id = children?.toString().toLowerCase().replace(/[^a-z0-9]+/g, '-');\n      return <h2 id={id} {...props}>{children}</h2>;\n    },\n    h3: ({ children, ...props }) => {\n      const id = children?.toString().toLowerCase().replace(/[^a-z0-9]+/g, '-');\n      return <h3 id={id} {...props}>{children}</h3>;\n    },\n    h4: ({ children, ...props }) => {\n      const id = children?.toString().toLowerCase().replace(/[^a-z0-9]+/g, '-');\n      return <h4 id={id} {...props}>{children}</h4>;\n    },\n    h5: ({ children, ...props }) => {\n      const id = children?.toString().toLowerCase().replace(/[^a-z0-9]+/g, '-');\n      return <h5 id={id} {...props}>{children}</h5>;\n    },\n    h6: ({ children, ...props }) => {\n      const id = children?.toString().toLowerCase().replace(/[^a-z0-9]+/g, '-');\n      return <h6 id={id} {...props}>{children}</h6>;\n    },\n    code: ({ inline, className, children, ...props }) => {\n      const match = /language-(\\w+)/.exec(className || '');\n      const language = match?.[1];\n      \n      \n      // Handle PlantUML code blocks\n      if (!inline && (language === 'plantuml' || language === 'puml')) {\n        const content = String(children).trim();\n        const plantUmlContent = content.includes('@startuml') \n          ? content \n          : `@startuml\\n${content}\\n@enduml`;\n        \n        return (\n          <PlantUmlDiagram \n            content={plantUmlContent}\n            format=\"svg\"\n            className=\"my-4\"\n          />\n        );\n      }\n      \n      // Handle Mermaid code blocks\n      if (!inline && language === 'mermaid') {\n        // Handle children that might be an array\n        let content = '';\n        if (Array.isArray(children)) {\n          content = children.join('');\n        } else {\n          content = String(children);\n        }\n        content = content.trim();\n        \n        \n        return (\n          <MermaidDiagram \n            content={content}\n            className=\"my-4\"\n          />\n        );\n      }\n      \n      return !inline && match ? (\n        <pre className={className}>\n          <code className={className} {...props}>\n            {children}\n          </code>\n        </pre>\n      ) : (\n        <code className={className} {...props}>\n          {children}\n        </code>\n      );\n    },\n    // Handle paragraphs that might contain diagram markers\n    p: ({ children, ...props }) => {\n      // Handle array of children (React Markdown can pass array)\n      const childrenArray = Array.isArray(children) ? children : [children];\n      \n      // Process each child\n      const processedChildren = childrenArray.map((child, index) => {\n        if (typeof child === 'string') {\n          // Check for PlantUML markers\n          const plantUmlMatch = child.match(/\\[PLANTUML:(plantuml-[^:]+):[^:]*:START\\]/);\n          if (plantUmlMatch) {\n            const [, id] = plantUmlMatch;\n            const block = plantUmlBlocks.find(b => b.id === id);\n            if (block) {\n              return (\n                <PlantUmlDiagram\n                  key={`plantuml-${index}`}\n                  content={block.content}\n                  title={block.title}\n                  format=\"svg\"\n                  className=\"my-4\"\n                />\n              );\n            }\n          }\n          \n          if (child.includes('[PLANTUML:') && child.includes(':END]')) {\n            return null;\n          }\n        }\n        \n        return child;\n      }).filter(child => child !== null);\n      \n      // If all children were diagram markers, return null to remove empty paragraph\n      if (processedChildren.length === 0) {\n        return null;\n      }\n      \n      // If we replaced some content with diagrams, return just the processed children\n      if (processedChildren.some(child => \n        child && typeof child === 'object' && \n        React.isValidElement(child) && \n        child.type === PlantUmlDiagram\n      )) {\n        return <>{processedChildren}</>;\n      }\n      \n      return <p {...props}>{processedChildren}</p>;\n    }\n  };\n\n  return (\n    <div className={`${styles.enhancedMarkdownViewer} ${className} ${isPrinting ? styles.printing : ''}`}>\n      {/* Toolbar */}\n      <div className={styles.markdownToolbar}>\n        <div className={styles.toolbarLeft}>\n          <button\n            onClick={() => setShowToc(!showToc)}\n            className={styles.toolbarButton}\n            title=\"Toggle Table of Contents\"\n          >\n            📑 TOC\n          </button>\n          <button\n            onClick={() => setShowSearch(!showSearch)}\n            className={styles.toolbarButton}\n            title=\"Search (Ctrl+F)\"\n          >\n            🔍 Search\n          </button>\n        </div>\n        <div className={styles.toolbarRight}>\n          <button\n            onClick={handlePrint}\n            className={styles.toolbarButton}\n            title=\"Print (Ctrl+P)\"\n          >\n            🖨️ Print\n          </button>\n          <button\n            onClick={handleExport}\n            className={styles.toolbarButton}\n            title=\"Export as HTML\"\n          >\n            💾 Export\n          </button>\n        </div>\n      </div>\n\n      {/* Search Bar */}\n      {showSearch && (\n        <div className={styles.searchBar}>\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            placeholder=\"Search in document...\"\n            className={styles.searchInput}\n            autoFocus\n          />\n          <div className={styles.searchControls}>\n            <span className={styles.searchResults}>\n              {searchResults > 0 ? `${currentMatch + 1}/${searchResults}` : 'No results'}\n            </span>\n            <button\n              onClick={() => navigateSearch('prev')}\n              disabled={searchResults === 0}\n              className={styles.searchNavButton}\n              title=\"Previous (Shift+Enter)\"\n            >\n              ↑\n            </button>\n            <button\n              onClick={() => navigateSearch('next')}\n              disabled={searchResults === 0}\n              className={styles.searchNavButton}\n              title=\"Next (Enter)\"\n            >\n              ↓\n            </button>\n            <button\n              onClick={() => {\n                setShowSearch(false);\n                setSearchTerm('');\n              }}\n              className={styles.searchCloseButton}\n              title=\"Close (Esc)\"\n            >\n              ✕\n            </button>\n          </div>\n        </div>\n      )}\n\n      <div className={styles.markdownContentWrapper}>\n        {/* Table of Contents */}\n        {showToc && tocItems.length > 0 && (\n          <aside className={styles.markdownToc}>\n            <h3>Table of Contents</h3>\n            <nav>\n              <ul>\n                {tocItems.map((item) => (\n                  <li\n                    key={item.id}\n                    className={styles.tocItem}\n                    style={{ paddingLeft: `${(item.level - 1) * 12}px` }}\n                  >\n                    <a\n                      href={`#${item.id}`}\n                      onClick={(e) => {\n                        e.preventDefault();\n                        scrollToHeading(item.id);\n                      }}\n                    >\n                      {item.text}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </nav>\n          </aside>\n        )}\n\n        {/* Markdown Content */}\n        <div className={styles.markdownContent} ref={contentRef}>\n          <ReactMarkdown\n            remarkPlugins={[remarkGfm]}\n            rehypePlugins={[\n              [rehypeHighlight as any],\n              [rehypeSlug as any],\n              [rehypeAutolinkHeadings as any, { behavior: 'wrap' }]\n            ]}\n            components={components}\n          >\n            {searchTerm ? highlightedContent : finalProcessedContent}\n          </ReactMarkdown>\n        </div>\n      </div>\n\n    </div>\n  );\n};\n\nexport default EnhancedMarkdownViewer;","/**\n * PlantUML Renderer Hook\n * \n * Detects and extracts PlantUML diagrams from markdown content\n * Provides utilities for rendering diagrams within markdown\n */\n\nimport { useState, useEffect, useCallback } from 'react';\n\ninterface PlantUmlBlock {\n  id: string;\n  content: string;\n  startIndex: number;\n  endIndex: number;\n  title?: string;\n}\n\ninterface UsePlantUmlRendererResult {\n  blocks: PlantUmlBlock[];\n  processedContent: string;\n  hasPlantUml: boolean;\n  extractPlantUmlBlocks: (content: string) => PlantUmlBlock[];\n  replacePlantUmlBlocks: (content: string, blocks: PlantUmlBlock[]) => string;\n}\n\nexport const usePlantUmlRenderer = (markdownContent: string): UsePlantUmlRendererResult => {\n  const [blocks, setBlocks] = useState<PlantUmlBlock[]>([]);\n  const [processedContent, setProcessedContent] = useState(markdownContent);\n\n  // Extract PlantUML blocks from markdown\n  const extractPlantUmlBlocks = useCallback((content: string): PlantUmlBlock[] => {\n    const plantUmlBlocks: PlantUmlBlock[] = [];\n    \n    // Pattern to match PlantUML code blocks\n    // Supports both ```plantuml and ```puml\n    const codeBlockPattern = /```(?:plantuml|puml)(?:\\s+(.+))?\\n([\\s\\S]*?)```/g;\n    \n    // Pattern to match inline PlantUML with @startuml/@enduml\n    const inlinePattern = /@startuml(?:\\s+(.+))?\\n([\\s\\S]*?)@enduml/g;\n\n    // Extract from code blocks\n    let match: RegExpExecArray | null;\n    while ((match = codeBlockPattern.exec(content)) !== null) {\n      const [fullMatch, title, blockContent] = match;\n      plantUmlBlocks.push({\n        id: `plantuml-${plantUmlBlocks.length}-${Date.now()}`,\n        content: `@startuml\\n${blockContent.trim()}\\n@enduml`,\n        startIndex: match.index,\n        endIndex: match.index + fullMatch.length,\n        title: title?.trim()\n      });\n    }\n\n    // Extract inline PlantUML (if not already in a code block)\n    while ((match = inlinePattern.exec(content)) !== null) {\n      const [fullMatch, title, blockContent] = match;\n      \n      // Check if this is already within a code block\n      const isInCodeBlock = plantUmlBlocks.some(\n        block => match!.index >= block.startIndex && match!.index <= block.endIndex\n      );\n      \n      if (!isInCodeBlock) {\n        plantUmlBlocks.push({\n          id: `plantuml-inline-${plantUmlBlocks.length}-${Date.now()}`,\n          content: fullMatch,\n          startIndex: match!.index,\n          endIndex: match!.index + fullMatch.length,\n          title: title?.trim()\n        });\n      }\n    }\n\n    return plantUmlBlocks;\n  }, []);\n\n  // Replace PlantUML blocks with placeholders\n  const replacePlantUmlBlocks = useCallback((content: string, blocks: PlantUmlBlock[]): string => {\n    let processedContent = content;\n    \n    // Sort blocks by startIndex in reverse order to avoid index shifting\n    const sortedBlocks = [...blocks].sort((a, b) => b.startIndex - a.startIndex);\n    \n    sortedBlocks.forEach(block => {\n      // Use a custom marker that won't be escaped by markdown\n      const placeholder = `\\n\\n[PLANTUML:${block.id}:${block.title || ''}:START]\\n${block.content}\\n[PLANTUML:${block.id}:END]\\n\\n`;\n      processedContent = \n        processedContent.slice(0, block.startIndex) +\n        placeholder +\n        processedContent.slice(block.endIndex);\n    });\n    \n    return processedContent;\n  }, []);\n\n  useEffect(() => {\n    const detectedBlocks = extractPlantUmlBlocks(markdownContent);\n    setBlocks(detectedBlocks);\n    \n    if (detectedBlocks.length > 0) {\n      const processed = replacePlantUmlBlocks(markdownContent, detectedBlocks);\n      setProcessedContent(processed);\n    } else {\n      setProcessedContent(markdownContent);\n    }\n  }, [markdownContent, extractPlantUmlBlocks, replacePlantUmlBlocks]);\n\n  return {\n    blocks,\n    processedContent,\n    hasPlantUml: blocks.length > 0,\n    extractPlantUmlBlocks,\n    replacePlantUmlBlocks\n  };\n};\n\n// Utility function to check if content might contain PlantUML\nexport const mightContainPlantUml = (content: string): boolean => {\n  return (\n    content.includes('```plantuml') ||\n    content.includes('```puml') ||\n    content.includes('@startuml') ||\n    content.includes('@enduml')\n  );\n};\n\n// Utility function to validate basic PlantUML syntax\nexport const validatePlantUmlSyntax = (content: string): { valid: boolean; error?: string } => {\n  const trimmed = content.trim();\n  \n  if (!trimmed.includes('@startuml')) {\n    return { valid: false, error: 'Missing @startuml directive' };\n  }\n  \n  if (!trimmed.includes('@enduml')) {\n    return { valid: false, error: 'Missing @enduml directive' };\n  }\n  \n  // Check for balanced braces\n  const openBraces = (trimmed.match(/{/g) || []).length;\n  const closeBraces = (trimmed.match(/}/g) || []).length;\n  \n  if (openBraces !== closeBraces) {\n    return { valid: false, error: 'Unbalanced braces in diagram' };\n  }\n  \n  return { valid: true };\n};","// extracted by mini-css-extract-plugin\nexport default {\"documentationView\":\"DocumentationView_documentationView__kypH4\",\"docHeader\":\"DocumentationView_docHeader__BGTnD\",\"backLink\":\"DocumentationView_backLink__+3a5V\",\"docContainer\":\"DocumentationView_docContainer__1HcBJ\",\"docSidebar\":\"DocumentationView_docSidebar__D0OgO\",\"sidebarTitle\":\"DocumentationView_sidebarTitle__1CbxV\",\"emptyMessage\":\"DocumentationView_emptyMessage__dcTAt\",\"sidebarHeader\":\"DocumentationView_sidebarHeader__r-eYK\",\"fileTree\":\"DocumentationView_fileTree__pXqLf\",\"fileTreeList\":\"DocumentationView_fileTreeList__3e+dT\",\"fileTreeItem\":\"DocumentationView_fileTreeItem__5HWEQ\",\"fileTreeLabel\":\"DocumentationView_fileTreeLabel__p-a6J\",\"selected\":\"DocumentationView_selected__-sshX\",\"icon\":\"DocumentationView_icon__Pbrwz\",\"name\":\"DocumentationView_name__5cPTW\",\"fileTreeChildren\":\"DocumentationView_fileTreeChildren__00OBi\",\"docContent\":\"DocumentationView_docContent__vOFJi\",\"loadingState\":\"DocumentationView_loadingState__ma1wW\",\"errorState\":\"DocumentationView_errorState__11u4m\",\"emptyState\":\"DocumentationView_emptyState__qmaGO\",\"spinner\":\"DocumentationView_spinner__F8mXr\",\"spin\":\"DocumentationView_spin__c2WLS\",\"noFiles\":\"DocumentationView_noFiles__ub7U9\"};","/**\n * Documentation View Component\n * \n * Displays repository documentation with enhanced markdown features\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link, useSearchParams } from 'react-router-dom';\nimport EnhancedMarkdownViewer from './EnhancedMarkdownViewer';\nimport styles from './DocumentationView.module.css';\nimport { getApiUrl } from '../utils/apiConfig';\n\ninterface FileItem {\n  name: string;\n  path: string;\n  type: 'file' | 'directory';\n  children?: FileItem[];\n}\n\nconst DocumentationView: React.FC = () => {\n  const { repoName } = useParams<{ repoName: string }>();\n  const [searchParams] = useSearchParams();\n  const pathParam = searchParams.get('path');\n  const [selectedFile, setSelectedFile] = useState<string>(pathParam || 'README.md');\n  const [content, setContent] = useState<string>('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [fileTree, setFileTree] = useState<FileItem[]>([]);\n  const [expandedDirs, setExpandedDirs] = useState<Set<string>>(new Set());\n\n  // Update selected file when path param changes\n  useEffect(() => {\n    if (pathParam) {\n      setSelectedFile(pathParam);\n    }\n  }, [pathParam]);\n\n  // Fetch file tree\n  useEffect(() => {\n    if (repoName) {\n      fetchFileTree();\n    }\n  }, [repoName]);\n\n  // Fetch content when file changes\n  useEffect(() => {\n    if (selectedFile && repoName) {\n      fetchFileContent(selectedFile);\n    }\n  }, [repoName, selectedFile]);\n\n  const fetchFileTree = async () => {\n    try {\n      const response = await fetch(getApiUrl(`/api/repository/${repoName}/files`), {\n        headers: {\n          'x-dev-mode': 'true'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch file tree');\n      }\n      const data = await response.json();\n      setFileTree(data);\n      \n      // Auto-expand directories with documentation\n      const dirsToExpand = new Set<string>();\n      const findDocDirs = (items: FileItem[], path = '') => {\n        items.forEach(item => {\n          const fullPath = path ? `${path}/${item.name}` : item.name;\n          if (item.type === 'directory') {\n            const hasDocFiles = item.children?.some(child => \n              child.name.toLowerCase().endsWith('.md') ||\n              child.name.toLowerCase() === 'readme.md'\n            );\n            if (hasDocFiles) {\n              dirsToExpand.add(fullPath);\n            }\n            if (item.children) {\n              findDocDirs(item.children, fullPath);\n            }\n          }\n        });\n      };\n      findDocDirs(data);\n      setExpandedDirs(dirsToExpand);\n    } catch (err) {\n      console.error('Error fetching file tree:', err);\n    }\n  };\n\n  const fetchFileContent = async (filePath: string) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch(getApiUrl(`/api/repository/${repoName}/file?path=${encodeURIComponent(filePath)}`), {\n        headers: {\n          'x-dev-mode': 'true'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch file content: ${response.status} ${response.statusText}`);\n      }\n      const text = await response.text();\n      setContent(text);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load documentation');\n      setContent('');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleDirectory = (path: string) => {\n    const newExpanded = new Set(expandedDirs);\n    if (newExpanded.has(path)) {\n      newExpanded.delete(path);\n    } else {\n      newExpanded.add(path);\n    }\n    setExpandedDirs(newExpanded);\n  };\n\n  const renderFileTree = (items: FileItem[], parentPath = ''): JSX.Element => {\n    return (\n      <ul className={styles.fileTreeList}>\n        {items.map((item) => {\n          const fullPath = parentPath ? `${parentPath}/${item.name}` : item.name;\n          const isExpanded = expandedDirs.has(fullPath);\n          const isMarkdown = item.name.toLowerCase().endsWith('.md');\n          const isSelected = fullPath === selectedFile;\n\n          if (item.type === 'directory') {\n            return (\n              <li key={fullPath} className={`${styles.fileTreeItem} ${styles.directory}`}>\n                <div\n                  className={`${styles.fileTreeLabel} ${isExpanded ? styles.expanded : ''}`}\n                  onClick={() => toggleDirectory(fullPath)}\n                >\n                  <span className={styles.icon}>{isExpanded ? '📂' : '📁'}</span>\n                  <span className={styles.name}>{item.name}</span>\n                </div>\n                {isExpanded && item.children && (\n                  <div className={styles.fileTreeChildren}>\n                    {renderFileTree(item.children, fullPath)}\n                  </div>\n                )}\n              </li>\n            );\n          }\n\n          if (isMarkdown) {\n            return (\n              <li key={fullPath} className={`${styles.fileTreeItem} ${styles.file}`}>\n                <div\n                  className={`${styles.fileTreeLabel} ${isSelected ? styles.selected : ''}`}\n                  onClick={() => setSelectedFile(fullPath)}\n                >\n                  <span className={styles.icon}>📄</span>\n                  <span className={styles.name}>{item.name}</span>\n                </div>\n              </li>\n            );\n          }\n\n          return null;\n        })}\n      </ul>\n    );\n  };\n\n  return (\n    <div className={styles.documentationView}>\n      <div className={styles.docHeader}>\n        <Link to=\"/\" className={styles.backLink}>← Back to Repositories</Link>\n        <h1>📚 Documentation: {repoName}</h1>\n      </div>\n\n      <div className={styles.docContainer}>\n        {/* Main Content Area - No file tree sidebar */}\n        <main className={styles.docContent}>\n          {loading ? (\n            <div className={styles.loadingState}>\n              <div className={styles.spinner}></div>\n              <p>Loading documentation...</p>\n            </div>\n          ) : error ? (\n            <div className={styles.errorState}>\n              <h2>Error Loading Documentation</h2>\n              <p>{error}</p>\n              <button onClick={() => fetchFileContent(selectedFile)}>Retry</button>\n            </div>\n          ) : content ? (\n            <EnhancedMarkdownViewer\n              content={content}\n              onContentChange={(newContent) => setContent(newContent)}\n              onNavigate={(path) => {\n                // Handle navigation to other markdown files\n                console.log('Navigating to:', path);\n                \n                // Handle relative paths\n                let targetPath: string;\n                \n                if (path.startsWith('./') || path.startsWith('../')) {\n                  // Relative path - resolve based on current file\n                  const currentDir = selectedFile.includes('/') \n                    ? selectedFile.substring(0, selectedFile.lastIndexOf('/'))\n                    : '';\n                  \n                  if (path.startsWith('./')) {\n                    targetPath = currentDir ? `${currentDir}/${path.substring(2)}` : path.substring(2);\n                  } else {\n                    // Handle ../ paths\n                    let dir = currentDir;\n                    let relativePath = path;\n                    while (relativePath.startsWith('../')) {\n                      const lastSlash = dir.lastIndexOf('/');\n                      dir = lastSlash > 0 ? dir.substring(0, lastSlash) : '';\n                      relativePath = relativePath.substring(3);\n                    }\n                    targetPath = dir ? `${dir}/${relativePath}` : relativePath;\n                  }\n                } else if (path.startsWith('/')) {\n                  // Absolute path from repo root\n                  targetPath = path.substring(1);\n                } else {\n                  // Plain path - could be relative to current directory or from root\n                  const currentDir = selectedFile.includes('/') \n                    ? selectedFile.substring(0, selectedFile.lastIndexOf('/'))\n                    : '';\n                  \n                  // First try relative to current directory\n                  if (currentDir) {\n                    targetPath = `${currentDir}/${path}`;\n                  } else {\n                    targetPath = path;\n                  }\n                }\n                \n                // Ensure .md extension only if not already present\n                if (!targetPath.endsWith('.md')) {\n                  targetPath += '.md';\n                }\n                \n                console.log('Resolved target path:', targetPath);\n                setSelectedFile(targetPath);\n              }}\n            />\n          ) : (\n            <div className={styles.emptyState}>\n              <h2>Select a Documentation File</h2>\n              <p>Choose a markdown file from the sidebar to view its contents.</p>\n            </div>\n          )}\n        </main>\n      </div>\n\n    </div>\n  );\n};\n\nexport default DocumentationView;"],"names":["PlantUmlDiagram","_ref","content","title","format","className","onError","loading","setLoading","useState","error","setError","diagramUrl","setDiagramUrl","retryCount","setRetryCount","abortControllerRef","useRef","useEffect","renderDiagram","current","abort","URL","revokeObjectURL","async","trim","AbortController","response","fetch","getApiUrl","method","headers","body","JSON","stringify","signal","ok","errorData","json","Error","blob","url","createObjectURL","err","name","message","handleRetry","prev","_jsxs","children","_jsx","Loader2","AlertCircle","includes","onClick","RefreshCw","handleDownload","link","document","createElement","href","download","appendChild","click","removeChild","Download","dangerouslySetInnerHTML","__html","src","alt","mermaidAPI","MermaidDiagram","theme","svgContent","setSvgContent","isMermaidReady","setIsMermaidReady","containerRef","Date","now","Math","random","loadMermaid","script","Promise","resolve","reject","onload","onerror","mermaid","window","initialize","startOnLoad","securityLevel","fontFamily","flowchart","useMaxWidth","htmlLabels","curve","sequence","diagramMarginX","diagramMarginY","gantt","numberSectionStyles","axisFormat","innerHTML","uniqueId","toString","substr","svg","render","errorMessage","Blob","type","disabled","ref","style","minHeight","onContentChange","onNavigate","searchTerm","setSearchTerm","showSearch","setShowSearch","showToc","setShowToc","highlightedContent","setHighlightedContent","searchResults","setSearchResults","currentMatch","setCurrentMatch","contentRef","isPrinting","setIsPrinting","blocks","plantUmlBlocks","processedContent","plantUmlProcessed","hasPlantUml","markdownContent","setBlocks","setProcessedContent","extractPlantUmlBlocks","useCallback","codeBlockPattern","inlinePattern","match","exec","fullMatch","blockContent","push","id","length","startIndex","index","endIndex","some","block","replacePlantUmlBlocks","sort","a","b","forEach","placeholder","slice","detectedBlocks","processed","usePlantUmlRenderer","finalProcessedContent","tocItems","useMemo","headingRegex","items","level","text","toLowerCase","replace","regex","RegExp","matches","matchIndex","highlighted","navigateSearch","direction","_contentRef$current","newMatch","marks","querySelectorAll","scrollIntoView","behavior","handleKeyDown","e","ctrlKey","metaKey","key","preventDefault","handlePrint","shiftKey","addEventListener","removeEventListener","setTimeout","print","components","_ref2","props","startsWith","handleClick","path","target","rel","h1","_ref3","h2","_ref4","h3","_ref5","h4","_ref6","h5","_ref7","h6","_ref8","code","_ref9","inline","language","String","plantUmlContent","Array","isArray","join","p","_ref0","processedChildren","map","child","plantUmlMatch","find","filter","React","_Fragment","styles","handleExport","_contentRef$current2","htmlContent","value","onChange","autoFocus","item","paddingLeft","element","getElementById","scrollToHeading","ReactMarkdown","remarkPlugins","remarkGfm","rehypePlugins","rehypeHighlight","rehypeSlug","rehypeAutolinkHeadings","DocumentationView","repoName","useParams","searchParams","useSearchParams","pathParam","get","selectedFile","setSelectedFile","setContent","fileTree","setFileTree","expandedDirs","setExpandedDirs","Set","fetchFileTree","fetchFileContent","data","dirsToExpand","findDocDirs","arguments","undefined","fullPath","_item$children","endsWith","add","encodeURIComponent","filePath","status","statusText","documentationView","docHeader","Link","to","backLink","docContainer","docContent","loadingState","spinner","errorState","EnhancedMarkdownViewer","newContent","targetPath","currentDir","substring","lastIndexOf","dir","relativePath","lastSlash","emptyState"],"sourceRoot":""}