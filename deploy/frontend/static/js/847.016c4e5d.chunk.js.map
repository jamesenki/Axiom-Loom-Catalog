{"version":3,"file":"static/js/847.016c4e5d.chunk.js","mappings":"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","sources":["components/GraphQLPlaygroundEnhanced.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useSearchParams, Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { GraphiQL } from 'graphiql';\nimport 'graphiql/graphiql.css';\nimport { \n  ArrowLeft,\n  Play,\n  Database,\n  Download,\n  History,\n  Settings,\n  Copy,\n  CheckCircle,\n  Save,\n  FileCode\n} from 'lucide-react';\nimport { theme } from '../styles/design-system';\nimport {\n  Container,\n  Section,\n  H1,\n  H2,\n  Text,\n  Button,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardContent,\n  Flex,\n  Badge,\n  FullPageLoading,\n  Input\n} from './styled';\n\ninterface GraphQLEndpoint {\n  name: string;\n  url: string;\n  headers?: Record<string, string>;\n  introspectionQuery?: string;\n}\n\ninterface QueryHistory {\n  id: string;\n  query: string;\n  variables?: string;\n  timestamp: number;\n  response?: any;\n  duration?: number;\n}\n\nconst PageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: ${props => props.theme.colors.background.primary};\n`;\n\nconst Header = styled.div`\n  background: ${props => props.theme.colors.background.secondary};\n  padding: ${props => props.theme.spacing[4]} ${props => props.theme.spacing[6]};\n  border-bottom: 1px solid ${props => props.theme.colors.border.light};\n`;\n\nconst PlaygroundContainer = styled.div`\n  flex: 1;\n  position: relative;\n  \n  .graphiql-container {\n    height: 100%;\n    \n    .graphiql-logo {\n      display: none;\n    }\n    \n    .graphiql-session-header {\n      background: ${props => props.theme.colors.background.secondary};\n      border-bottom: 1px solid ${props => props.theme.colors.border.light};\n    }\n    \n    .graphiql-editors {\n      background: ${props => props.theme.colors.background.primary};\n    }\n    \n    .graphiql-editor {\n      background: ${props => props.theme.colors.background.primary};\n    }\n    \n    .graphiql-response {\n      background: ${props => props.theme.colors.background.secondary};\n    }\n    \n    .graphiql-toolbar-button {\n      background: ${props => props.theme.colors.primary.yellow};\n      color: ${props => props.theme.colors.primary.black};\n      \n      &:hover {\n        background: ${props => props.theme.colors.primary.black};\n        color: ${props => props.theme.colors.primary.yellow};\n      }\n    }\n    \n    .CodeMirror {\n      background: ${props => props.theme.colors.background.primary};\n      color: ${props => props.theme.colors.text.primary};\n      font-family: ${props => props.theme.typography.fontFamily.mono};\n      font-size: ${props => props.theme.typography.fontSize.sm};\n    }\n    \n    .CodeMirror-gutters {\n      background: ${props => props.theme.colors.background.secondary};\n      border-right: 1px solid ${props => props.theme.colors.border.light};\n    }\n    \n    .CodeMirror-cursor {\n      border-left-color: ${props => props.theme.colors.primary.yellow};\n    }\n    \n    .CodeMirror-selected {\n      background: rgba(255, 230, 0, 0.2);\n    }\n  }\n`;\n\nconst ConfigPanel = styled.div<{ isOpen: boolean }>`\n  position: fixed;\n  right: 0;\n  top: 0;\n  width: 400px;\n  height: 100vh;\n  background: ${props => props.theme.colors.background.secondary};\n  border-left: 1px solid ${props => props.theme.colors.border.light};\n  transform: ${props => props.isOpen ? 'translateX(0)' : 'translateX(100%)'};\n  transition: transform 0.3s ease;\n  z-index: 1000;\n  overflow-y: auto;\n  padding: ${props => props.theme.spacing[6]};\n`;\n\nconst HistoryPanel = styled.div<{ isOpen: boolean }>`\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 350px;\n  height: 100vh;\n  background: ${props => props.theme.colors.background.secondary};\n  border-right: 1px solid ${props => props.theme.colors.border.light};\n  transform: ${props => props.isOpen ? 'translateX(0)' : 'translateX(-100%)'};\n  transition: transform 0.3s ease;\n  z-index: 1000;\n  overflow-y: auto;\n`;\n\nconst HistoryItem = styled.div`\n  padding: ${props => props.theme.spacing[3]};\n  border-bottom: 1px solid ${props => props.theme.colors.border.light};\n  cursor: pointer;\n  transition: background 0.2s ease;\n  \n  &:hover {\n    background: ${props => props.theme.colors.background.primary};\n  }\n`;\n\nconst QueryPreview = styled.pre`\n  font-family: ${props => props.theme.typography.fontFamily.mono};\n  font-size: ${props => props.theme.typography.fontSize.xs};\n  color: ${props => props.theme.colors.text.secondary};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin: ${props => props.theme.spacing[1]} 0 0 0;\n`;\n\nconst EndpointSelector = styled.div`\n  margin-bottom: ${props => props.theme.spacing[6]};\n`;\n\nconst HeadersEditor = styled.div`\n  margin-bottom: ${props => props.theme.spacing[6]};\n`;\n\nconst HeaderRow = styled.div`\n  display: flex;\n  gap: ${props => props.theme.spacing[2]};\n  margin-bottom: ${props => props.theme.spacing[2]};\n`;\n\nconst ActionButton = styled(Button)`\n  background: ${props => props.theme.colors.primary.yellow};\n  color: ${props => props.theme.colors.primary.black};\n  \n  &:hover {\n    background: ${props => props.theme.colors.primary.black};\n    color: ${props => props.theme.colors.primary.yellow};\n  }\n`;\n\nconst SavedQueryCard = styled(Card)`\n  margin-bottom: ${props => props.theme.spacing[3]};\n  cursor: pointer;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: ${props => props.theme.shadows.md};\n  }\n`;\n\nconst GraphQLPlaygroundEnhanced: React.FC = () => {\n  const { repoName } = useParams<{ repoName: string }>();\n  const [searchParams] = useSearchParams();\n  const schemaPath = searchParams.get('schema');\n  \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showConfig, setShowConfig] = useState(false);\n  const [showHistory, setShowHistory] = useState(false);\n  \n  // GraphQL state\n  const [endpoint, setEndpoint] = useState<GraphQLEndpoint>({\n    name: 'Default',\n    url: '/graphql',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const [schema, setSchema] = useState<any>(null);\n  const [query, setQuery] = useState('');\n  const [variables, setVariables] = useState('');\n  const [headers, setHeaders] = useState<Record<string, string>>(endpoint.headers || {});\n  \n  // History state\n  const [history, setHistory] = useState<QueryHistory[]>([]);\n  const [savedQueries, setSavedQueries] = useState<Array<{\n    id: string;\n    name: string;\n    query: string;\n    variables?: string;\n  }>>([]);\n\n  useEffect(() => {\n    loadSchema();\n    loadHistory();\n    loadSavedQueries();\n  }, [repoName, schemaPath]);\n\n  const loadSchema = async () => {\n    try {\n      if (schemaPath) {\n        const response = await fetch(`/api/repository/${repoName}/file?path=${encodeURIComponent(schemaPath)}`);\n        if (!response.ok) throw new Error('Failed to load schema');\n        \n        const schemaContent = await response.text();\n        \n        // Parse schema and create initial query\n        if (schemaContent.includes('type Query')) {\n          const queryMatch = schemaContent.match(/type Query\\s*{([^}]*)}/);\n          if (queryMatch) {\n            const fields = queryMatch[1]\n              .split('\\n')\n              .map(line => line.trim())\n              .filter(line => line && !line.startsWith('#'))\n              .slice(0, 3);\n            \n            if (fields.length > 0) {\n              const sampleQuery = `# Welcome to GraphQL Playground\n# \n# GraphQL queries for ${repoName}\n\nquery SampleQuery {\n${fields.map(field => `  ${field.split(':')[0]?.trim()}`).join('\\n')}\n}`;\n              setQuery(sampleQuery);\n            }\n          }\n        }\n        \n        // For demo, we'll simulate schema introspection\n        setSchema({\n          __schema: {\n            queryType: { name: 'Query' },\n            types: []\n          }\n        });\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadHistory = () => {\n    const saved = localStorage.getItem(`graphql-history-${repoName}`);\n    if (saved) {\n      try {\n        setHistory(JSON.parse(saved));\n      } catch (e) {\n        console.error('Failed to load history:', e);\n      }\n    }\n  };\n\n  const loadSavedQueries = () => {\n    const saved = localStorage.getItem(`graphql-saved-${repoName}`);\n    if (saved) {\n      try {\n        setSavedQueries(JSON.parse(saved));\n      } catch (e) {\n        console.error('Failed to load saved queries:', e);\n      }\n    }\n  };\n\n  const saveToHistory = (query: string, variables: string, response: any, duration: number) => {\n    const historyItem: QueryHistory = {\n      id: Date.now().toString(),\n      query,\n      variables,\n      response,\n      duration,\n      timestamp: Date.now()\n    };\n    \n    const newHistory = [historyItem, ...history].slice(0, 50);\n    setHistory(newHistory);\n    localStorage.setItem(`graphql-history-${repoName}`, JSON.stringify(newHistory));\n  };\n\n  const saveQuery = (name: string) => {\n    const savedQuery = {\n      id: Date.now().toString(),\n      name,\n      query,\n      variables: variables || undefined\n    };\n    \n    const newSaved = [...savedQueries, savedQuery];\n    setSavedQueries(newSaved);\n    localStorage.setItem(`graphql-saved-${repoName}`, JSON.stringify(newSaved));\n  };\n\n  const loadFromHistory = (item: QueryHistory) => {\n    setQuery(item.query);\n    setVariables(item.variables || '');\n    setShowHistory(false);\n  };\n\n  const loadSavedQuery = (saved: typeof savedQueries[0]) => {\n    setQuery(saved.query);\n    setVariables(saved.variables || '');\n  };\n\n  const fetcher = async (graphQLParams: any) => {\n    const startTime = Date.now();\n    \n    try {\n      // Replace environment variables in endpoint URL\n      let finalUrl = endpoint.url;\n      if (finalUrl.startsWith('/')) {\n        finalUrl = `${window.location.origin}${finalUrl}`;\n      }\n      \n      // For demo purposes, simulate a GraphQL response\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const mockResponse = {\n        data: {\n          message: \"This is a simulated GraphQL response\",\n          info: {\n            repository: repoName,\n            timestamp: new Date().toISOString(),\n            query: graphQLParams.query\n          }\n        }\n      };\n      \n      const duration = Date.now() - startTime;\n      saveToHistory(graphQLParams.query, graphQLParams.variables, mockResponse, duration);\n      \n      return mockResponse;\n    } catch (error) {\n      return {\n        errors: [{\n          message: error instanceof Error ? error.message : 'Unknown error occurred'\n        }]\n      };\n    }\n  };\n\n  const exportQuery = (format: 'curl' | 'javascript' | 'python') => {\n    const queryObj = {\n      query,\n      variables: variables ? JSON.parse(variables) : undefined\n    };\n    \n    let code = '';\n    \n    switch (format) {\n      case 'curl':\n        code = `curl -X POST ${endpoint.url} \\\\\n  -H \"Content-Type: application/json\" \\\\\n${Object.entries(headers).map(([k, v]) => `  -H \"${k}: ${v}\" \\\\`).join('\\n')}\n  -d '${JSON.stringify(queryObj)}'`;\n        break;\n        \n      case 'javascript':\n        code = `fetch(\"${endpoint.url}\", {\n  method: \"POST\",\n  headers: ${JSON.stringify({ ...headers, 'Content-Type': 'application/json' }, null, 2)},\n  body: JSON.stringify(${JSON.stringify(queryObj, null, 2)})\n})\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error('Error:', error));`;\n        break;\n        \n      case 'python':\n        code = `import requests\n\nquery = \"\"\"\n${query}\n\"\"\"\n\nvariables = ${variables || '{}'}\n\nresponse = requests.post(\n    \"${endpoint.url}\",\n    json={\"query\": query, \"variables\": variables},\n    headers=${JSON.stringify(headers, null, 2).replace(/\"/g, \"'\")}\n)\n\nprint(response.json())`;\n        break;\n    }\n    \n    navigator.clipboard.writeText(code);\n  };\n\n  if (loading) {\n    return <FullPageLoading text=\"Loading GraphQL Playground...\" />;\n  }\n\n  if (error) {\n    return (\n      <Container maxWidth=\"lg\">\n        <Section>\n          <H1 color=\"secondary\">Error Loading GraphQL Playground</H1>\n          <Text color=\"secondary\">{error}</Text>\n          <Button as={Link} to={`/api-explorer/${repoName}`}>\n            Back to API Explorer\n          </Button>\n        </Section>\n      </Container>\n    );\n  }\n\n  return (\n    <PageContainer>\n      <Header>\n        <Flex align=\"center\" justify=\"between\">\n          <Flex align=\"center\" gap={4}>\n            <Button\n              as={Link}\n              to={`/api-explorer/${repoName}`}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              <ArrowLeft size={20} />\n              Back to Explorer\n            </Button>\n            \n            <div>\n              <H2 style={{ margin: 0 }}>GraphQL Playground</H2>\n              <Text color=\"secondary\" size=\"small\">{repoName}</Text>\n            </div>\n          </Flex>\n          \n          <Flex gap={2}>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowHistory(!showHistory)}\n            >\n              <History size={20} />\n              History\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowConfig(!showConfig)}\n            >\n              <Settings size={20} />\n              Config\n            </Button>\n          </Flex>\n        </Flex>\n      </Header>\n\n      <PlaygroundContainer>\n        <GraphiQL\n          fetcher={fetcher}\n        />\n      </PlaygroundContainer>\n\n      <HistoryPanel isOpen={showHistory}>\n        <div style={{ padding: theme.spacing[4] }}>\n          <Flex align=\"center\" justify=\"between\" style={{ marginBottom: theme.spacing[4] }}>\n            <H2>Query History</H2>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => setShowHistory(false)}\n            >\n              ✕\n            </Button>\n          </Flex>\n          \n          {history.length === 0 ? (\n            <Text color=\"secondary\">No queries executed yet</Text>\n          ) : (\n            history.map(item => (\n              <HistoryItem key={item.id} onClick={() => loadFromHistory(item)}>\n                <Flex align=\"center\" justify=\"between\">\n                  <Text size=\"small\" color=\"secondary\">\n                    {new Date(item.timestamp).toLocaleTimeString()}\n                  </Text>\n                  {item.duration && (\n                    <Badge size=\"sm\">{item.duration}ms</Badge>\n                  )}\n                </Flex>\n                <QueryPreview>{item.query}</QueryPreview>\n              </HistoryItem>\n            ))\n          )}\n        </div>\n      </HistoryPanel>\n\n      <ConfigPanel isOpen={showConfig}>\n        <Flex align=\"center\" justify=\"between\" style={{ marginBottom: theme.spacing[6] }}>\n          <H2>Configuration</H2>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowConfig(false)}\n          >\n            ✕\n          </Button>\n        </Flex>\n\n        <EndpointSelector>\n          <Text weight=\"semibold\" style={{ marginBottom: theme.spacing[2] }}>\n            GraphQL Endpoint\n          </Text>\n          <Input\n            type=\"text\"\n            value={endpoint.url}\n            onChange={(e) => setEndpoint({ ...endpoint, url: e.target.value })}\n            placeholder=\"https://api.example.com/graphql\"\n          />\n        </EndpointSelector>\n\n        <HeadersEditor>\n          <Text weight=\"semibold\" style={{ marginBottom: theme.spacing[2] }}>\n            Headers\n          </Text>\n          {Object.entries(headers).map(([key, value], index) => (\n            <HeaderRow key={index}>\n              <Input\n                type=\"text\"\n                value={key}\n                placeholder=\"Header name\"\n                onChange={(e) => {\n                  const newHeaders = { ...headers };\n                  delete newHeaders[key];\n                  newHeaders[e.target.value] = value;\n                  setHeaders(newHeaders);\n                }}\n              />\n              <Input\n                type=\"text\"\n                value={value}\n                placeholder=\"Header value\"\n                onChange={(e) => {\n                  setHeaders({ ...headers, [key]: e.target.value });\n                }}\n              />\n            </HeaderRow>\n          ))}\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setHeaders({ ...headers, '': '' })}\n          >\n            Add Header\n          </Button>\n        </HeadersEditor>\n\n        <div style={{ marginBottom: theme.spacing[6] }}>\n          <Text weight=\"semibold\" style={{ marginBottom: theme.spacing[2] }}>\n            Export Query\n          </Text>\n          <Flex gap={2}>\n            <Button size=\"sm\" variant=\"outline\" onClick={() => exportQuery('curl')}>\n              cURL\n            </Button>\n            <Button size=\"sm\" variant=\"outline\" onClick={() => exportQuery('javascript')}>\n              JavaScript\n            </Button>\n            <Button size=\"sm\" variant=\"outline\" onClick={() => exportQuery('python')}>\n              Python\n            </Button>\n          </Flex>\n        </div>\n\n        <div>\n          <Flex align=\"center\" justify=\"between\" style={{ marginBottom: theme.spacing[3] }}>\n            <Text weight=\"semibold\">Saved Queries</Text>\n            <Button\n              size=\"sm\"\n              onClick={() => {\n                const name = prompt('Query name:');\n                if (name) saveQuery(name);\n              }}\n            >\n              <Save size={16} />\n              Save Current\n            </Button>\n          </Flex>\n          \n          {savedQueries.length === 0 ? (\n            <Text color=\"secondary\" size=\"small\">No saved queries</Text>\n          ) : (\n            savedQueries.map(saved => (\n              <SavedQueryCard key={saved.id} onClick={() => loadSavedQuery(saved)}>\n                <CardContent>\n                  <Text weight=\"semibold\">{saved.name}</Text>\n                  <QueryPreview>{saved.query}</QueryPreview>\n                </CardContent>\n              </SavedQueryCard>\n            ))\n          )}\n        </div>\n      </ConfigPanel>\n    </PageContainer>\n  );\n};\n\nexport default GraphQLPlaygroundEnhanced;"],"names":["PageContainer","styled","div","props","theme","colors","background","primary","Header","secondary","spacing","border","light","PlaygroundContainer","yellow","black","text","typography","fontFamily","mono","fontSize","sm","ConfigPanel","isOpen","HistoryPanel","HistoryItem","QueryPreview","pre","xs","EndpointSelector","HeadersEditor","HeaderRow","SavedQueryCard","Button","Card","shadows","md","GraphQLPlaygroundEnhanced","repoName","useParams","searchParams","useSearchParams","schemaPath","get","loading","setLoading","useState","error","setError","showConfig","setShowConfig","showHistory","setShowHistory","endpoint","setEndpoint","name","url","headers","schema","setSchema","query","setQuery","variables","setVariables","setHeaders","history","setHistory","savedQueries","setSavedQueries","useEffect","loadSchema","loadHistory","loadSavedQueries","async","response","fetch","encodeURIComponent","ok","Error","schemaContent","includes","queryMatch","match","fields","split","map","line","trim","filter","startsWith","slice","length","sampleQuery","field","_field$split$","join","__schema","queryType","types","err","message","saved","localStorage","getItem","JSON","parse","e","exportQuery","format","queryObj","undefined","code","Object","entries","_ref","k","v","stringify","replace","navigator","clipboard","writeText","_jsx","FullPageLoading","Container","maxWidth","children","_jsxs","Section","H1","color","Text","as","Link","to","Flex","align","justify","gap","variant","size","ArrowLeft","H2","style","margin","onClick","History","Settings","GraphiQL","fetcher","startTime","Date","now","finalUrl","window","location","origin","Promise","resolve","setTimeout","mockResponse","data","info","repository","timestamp","toISOString","graphQLParams","duration","saveToHistory","newHistory","id","toString","setItem","errors","padding","marginBottom","item","loadFromHistory","toLocaleTimeString","Badge","weight","Input","type","value","onChange","target","placeholder","_ref2","index","key","newHeaders","prompt","savedQuery","newSaved","saveQuery","Save","loadSavedQuery","CardContent"],"sourceRoot":""}