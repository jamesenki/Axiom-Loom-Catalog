{"version":3,"file":"static/js/63.b2a06eaa.chunk.js","mappings":"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","sources":["components/GraphQLPlaygroundSimple.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useParams, useSearchParams, Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { ArrowLeft } from 'lucide-react';\nimport {\n  Container,\n  Section,\n  H1,\n  H2,\n  Text,\n  Button,\n  Card,\n  CardContent,\n  Flex,\n  FullPageLoading\n} from './styled';\n\nconst PageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: ${props => props.theme.colors.background.primary};\n`;\n\nconst Header = styled.div`\n  background: ${props => props.theme.colors.background.secondary};\n  padding: ${props => props.theme.spacing[4]} ${props => props.theme.spacing[6]};\n  border-bottom: 1px solid ${props => props.theme.colors.border.light};\n`;\n\nconst PlaygroundContainer = styled.div`\n  flex: 1;\n  padding: ${props => props.theme.spacing[6]};\n  overflow-y: auto;\n`;\n\nconst EditorArea = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: ${props => props.theme.spacing[4]};\n  height: 100%;\n`;\n\nconst EditorPanel = styled(Card)`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Editor = styled.textarea`\n  flex: 1;\n  padding: ${props => props.theme.spacing[3]};\n  font-family: ${props => props.theme.typography.fontFamily.mono};\n  font-size: ${props => props.theme.typography.fontSize.sm};\n  background: ${props => props.theme.colors.background.primary};\n  color: ${props => props.theme.colors.text.primary};\n  border: 1px solid ${props => props.theme.colors.border.light};\n  border-radius: ${props => props.theme.borderRadius.md};\n  resize: none;\n  \n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary.yellow};\n  }\n`;\n\nconst ResultArea = styled.pre`\n  flex: 1;\n  padding: ${props => props.theme.spacing[3]};\n  font-family: ${props => props.theme.typography.fontFamily.mono};\n  font-size: ${props => props.theme.typography.fontSize.sm};\n  background: ${props => props.theme.colors.background.primary};\n  color: ${props => props.theme.colors.text.primary};\n  border: 1px solid ${props => props.theme.colors.border.light};\n  border-radius: ${props => props.theme.borderRadius.md};\n  overflow: auto;\n  margin: 0;\n`;\n\nconst GraphQLPlaygroundSimple: React.FC = () => {\n  const { repoName } = useParams<{ repoName: string }>();\n  const [searchParams] = useSearchParams();\n  const schemaPath = searchParams.get('schema');\n  \n  const [loading, setLoading] = useState(false);\n  const [query, setQuery] = useState(`# Welcome to GraphQL Playground\n# \n# Enter your GraphQL query here\n# Example:\n\nquery {\n  # Your query fields here\n}`);\n  const [variables, setVariables] = useState('{}');\n  const [result, setResult] = useState('');\n\n  const executeQuery = async () => {\n    setLoading(true);\n    try {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const mockResponse = {\n        data: {\n          message: \"This is a simulated GraphQL response\",\n          info: {\n            repository: repoName,\n            schema: schemaPath,\n            timestamp: new Date().toISOString()\n          }\n        }\n      };\n      \n      setResult(JSON.stringify(mockResponse, null, 2));\n    } catch (error) {\n      setResult(JSON.stringify({\n        errors: [{\n          message: error instanceof Error ? error.message : 'Unknown error'\n        }]\n      }, null, 2));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <PageContainer>\n      <Header>\n        <Flex align=\"center\" justify=\"between\">\n          <Flex align=\"center\" gap={4}>\n            <Button\n              as={Link}\n              to={`/api-explorer/${repoName}`}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              <ArrowLeft size={20} />\n              Back to Explorer\n            </Button>\n            \n            <div>\n              <H2 style={{ margin: 0 }}>GraphQL Playground</H2>\n              <Text color=\"secondary\" size=\"small\">{repoName}</Text>\n            </div>\n          </Flex>\n          \n          <Button onClick={executeQuery} disabled={loading}>\n            {loading ? 'Executing...' : 'Execute Query'}\n          </Button>\n        </Flex>\n      </Header>\n\n      <PlaygroundContainer>\n        <EditorArea>\n          <EditorPanel>\n            <CardContent>\n              <Flex align=\"center\" justify=\"between\" style={{ marginBottom: '1rem' }}>\n                <Text weight=\"semibold\">Query</Text>\n              </Flex>\n              <Editor\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                placeholder=\"Enter your GraphQL query...\"\n              />\n              \n              <Flex align=\"center\" justify=\"between\" style={{ margin: '1rem 0' }}>\n                <Text weight=\"semibold\">Variables</Text>\n              </Flex>\n              <Editor\n                value={variables}\n                onChange={(e) => setVariables(e.target.value)}\n                placeholder=\"{}\"\n                style={{ minHeight: '150px', maxHeight: '150px' }}\n              />\n            </CardContent>\n          </EditorPanel>\n\n          <EditorPanel>\n            <CardContent>\n              <Flex align=\"center\" justify=\"between\" style={{ marginBottom: '1rem' }}>\n                <Text weight=\"semibold\">Result</Text>\n              </Flex>\n              <ResultArea>\n                {result || 'Execute a query to see results'}\n              </ResultArea>\n            </CardContent>\n          </EditorPanel>\n        </EditorArea>\n      </PlaygroundContainer>\n    </PageContainer>\n  );\n};\n\nexport default GraphQLPlaygroundSimple;"],"names":["PageContainer","styled","div","props","theme","colors","background","primary","Header","secondary","spacing","border","light","PlaygroundContainer","EditorArea","EditorPanel","Card","Editor","textarea","typography","fontFamily","mono","fontSize","sm","text","borderRadius","md","yellow","ResultArea","pre","GraphQLPlaygroundSimple","repoName","useParams","searchParams","useSearchParams","schemaPath","get","loading","setLoading","useState","query","setQuery","variables","setVariables","result","setResult","_jsxs","children","_jsx","Flex","align","justify","gap","Button","as","Link","to","variant","size","ArrowLeft","H2","style","margin","Text","color","onClick","async","Promise","resolve","setTimeout","mockResponse","data","message","info","repository","schema","timestamp","Date","toISOString","JSON","stringify","error","errors","Error","disabled","CardContent","marginBottom","weight","value","onChange","e","target","placeholder","minHeight","maxHeight"],"sourceRoot":""}