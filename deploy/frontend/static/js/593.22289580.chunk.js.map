{"version":3,"file":"static/js/593.22289580.chunk.js","mappings":"qTA6BA,MAAMA,EAAaC,EAAAA,GAAOC,GAAG;;;gBAGbC,GAASA,EAAMC,MAAMC,OAAOC,WAAWC;EAGjDC,EAAUP,EAAAA,GAAOC,GAAG;;gBAEVC,GAASA,EAAMC,MAAMC,OAAOC,WAAWG;4BAC3BN,GAASA,EAAMC,MAAMC,OAAOK,OAAOC;aAClDR,GAASA,EAAMC,MAAMQ,QAAQ;;EAIpCC,EAAcZ,EAAAA,GAAOC,GAAG;;;;gBAIdC,GAASA,EAAMC,MAAMC,OAAOC,WAAWC;EAGjDO,EAAmBb,EAAAA,GAAOC,GAAG;gBACnBC,GAASA,EAAMC,MAAMC,OAAOC,WAAWG;aAC1CN,GAASA,EAAMC,MAAMQ,QAAQ;6BACbT,GAASA,EAAMC,MAAMC,OAAOK,OAAOC;;;;EAM1DI,EAAoBd,EAAAA,GAAOC,GAAG;;;EAK9Bc,EAAaf,EAAAA,GAAOC,GAAG;;aAEhBC,GAASA,EAAMC,MAAMQ,QAAQ;4BACdT,GAASA,EAAMC,MAAMC,OAAOK,OAAOC;EAGzDM,EAAchB,EAAAA,GAAOC,GAAG;;aAEjBC,GAASA,EAAMC,MAAMQ,QAAQ;gBAC1BT,GAASA,EAAMC,MAAMC,OAAOC,WAAWG;EAGjDS,GAAajB,EAAAA,EAAAA,IAAOkB,EAAAA,GAAO;mBACdhB,GAASA,EAAMC,MAAMQ,QAAQ;;sBAE1BT,GAASA,EAAMC,MAAMC,OAAOE,QAAQa;WAC/CjB,GAASA,EAAMC,MAAMC,OAAOE,QAAQa;;;kBAG7BjB,GAASA,EAAMC,MAAMC,OAAOE,QAAQa;aACzCjB,GAASA,EAAMC,MAAMC,OAAOE,QAAQc;;EAI3CC,EAAerB,EAAAA,GAAOsB,EAAE;eACfpB,GAASA,EAAMC,MAAMoB,WAAWC,SAASC;iBACvCvB,GAASA,EAAMC,MAAMoB,WAAWG,WAAWC;gBAC5CzB,GAASA,EAAMC,MAAMQ,QAAQ;WAClCT,GAASA,EAAMC,MAAMC,OAAOwB,KAAKtB;EAGtCuB,EAAa7B,EAAAA,GAAOC,GAAyB;aACtCC,GAASA,EAAMC,MAAMQ,QAAQ;mBACvBT,GAASA,EAAMC,MAAMQ,QAAQ;mBAC7BT,GAASA,EAAMC,MAAM2B,aAAaC;;;gBAGrC7B,GAASA,EAAM8B,OAAS7B,EAAAA,EAAMC,OAAOE,QAAQa,OAAShB,EAAAA,EAAMC,OAAOC,WAAWC;WACnFJ,GAASA,EAAM8B,OAAS7B,EAAAA,EAAMC,OAAOE,QAAQc,MAAQjB,EAAAA,EAAMC,OAAOwB,KAAKtB;sBAC5DJ,GAASA,EAAM8B,OAAS7B,EAAAA,EAAMC,OAAOE,QAAQa,OAAShB,EAAAA,EAAMC,OAAOK,OAAOC;;;;kBAI9ER,GAASA,EAAM8B,OAAS7B,EAAAA,EAAMC,OAAOE,QAAQa,OAAS;oBACpDjB,GAASA,EAAMC,MAAMC,OAAOE,QAAQa;;;EAKlDc,EAAajC,EAAAA,GAAOC,GAAG;;;SAGpBC,GAASA,EAAMC,MAAMQ,QAAQ;mBACnBT,GAASA,EAAMC,MAAMQ,QAAQ;EAG1CuB,EAAalC,EAAAA,GAAOmC,EAAE;eACbjC,GAASA,EAAMC,MAAMoB,WAAWC,SAASY;iBACvClC,GAASA,EAAMC,MAAMoB,WAAWG,WAAWW;;;;;;EAQtDC,EAAatC,EAAAA,GAAOuC,CAAC;eACZrC,GAASA,EAAMC,MAAMoB,WAAWC,SAASgB;WAC7CtC,GAASA,EAAMC,MAAMC,OAAOwB,KAAKpB;;;;;;EAQtCiC,EAAczC,EAAAA,GAAO0C,QAAQ;;;aAGtBxC,GAASA,EAAMC,MAAMQ,QAAQ;sBACpBT,GAASA,EAAMC,MAAMC,OAAOK,OAAOC;mBACtCR,GAASA,EAAMC,MAAM2B,aAAaC;iBACpC7B,GAASA,EAAMC,MAAMoB,WAAWoB,WAAWC;eAC7C1C,GAASA,EAAMC,MAAMoB,WAAWC,SAASgB;gBACxCtC,GAASA,EAAMC,MAAMC,OAAOC,WAAWC;WAC5CJ,GAASA,EAAMC,MAAMC,OAAOwB,KAAKtB;;;;;oBAKxBJ,GAASA,EAAMC,MAAMC,OAAOE,QAAQa;;EAIlD0B,EAAe7C,EAAAA,GAAO8C,GAAG;;;aAGlB5C,GAASA,EAAMC,MAAMQ,QAAQ;sBACpBT,GAASA,EAAMC,MAAMC,OAAOK,OAAOC;mBACtCR,GAASA,EAAMC,MAAM2B,aAAaC;iBACpC7B,GAASA,EAAMC,MAAMoB,WAAWoB,WAAWC;eAC7C1C,GAASA,EAAMC,MAAMoB,WAAWC,SAASgB;gBACxCtC,GAASA,EAAMC,MAAMC,OAAOC,WAAWC;WAC5CJ,GAASA,EAAMC,MAAMC,OAAOwB,KAAKtB;;;EAKtCyC,EAAe/C,EAAAA,GAAOC,GAAG;;;gBAGfC,GAASA,EAAMC,MAAMC,OAAOC,WAAWC;sBACjCJ,GAASA,EAAMC,MAAMC,OAAOK,OAAOC;mBACtCR,GAASA,EAAMC,MAAM2B,aAAaC;aACxC7B,GAASA,EAAMC,MAAMQ,QAAQ;gBAC1BT,GAASA,EAAMC,MAAMQ,QAAQ;EAGvCqC,EAAgBhD,EAAAA,GAAO8C,GAAG;iBACf5C,GAASA,EAAMC,MAAMoB,WAAWoB,WAAWC;eAC7C1C,GAASA,EAAMC,MAAMoB,WAAWC,SAASgB;WAC7CtC,GAASA,EAAMC,MAAMC,OAAOwB,KAAKtB;;;EAKtC2C,EAAgBjD,EAAAA,GAAOC,GAAG;;SAEvBC,GAASA,EAAMC,MAAMQ,QAAQ;YAC1BT,GAASA,EAAMC,MAAMQ,QAAQ;EAGnCuC,GAAalD,EAAAA,EAAAA,IAAOkB,EAAAA,GAAO;gBACjBhB,GAASA,EAAMC,MAAMC,OAAOE,QAAQa;WACzCjB,GAASA,EAAMC,MAAMC,OAAOE,QAAQc;;;kBAG7BlB,GAASA,EAAMC,MAAMC,OAAOE,QAAQc;aACzClB,GAASA,EAAMC,MAAMC,OAAOE,QAAQa;;EAI3CgC,EAAwBC,IAE5B,MAGMC,EAHiBD,EAAWE,QAAQ,oBAAqB,IAI5DA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,OACjBA,QAAQ,YAAa,WACrBA,QAAQ,WAAY,UACpBA,QAAQ,UAAYC,GAAUA,EAAMC,eAGvC,OAAOH,EAAQI,OAAS,GAAKJ,EAAQK,UAAU,EAAG,IAAM,MAAQL,GCzNlE,ED4NyCM,KACvC,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,MACdC,EAASC,IAAcC,EAAAA,EAAAA,UAA0B,KACjDC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAA+B,OACpEG,EAAeC,IAAoBJ,EAAAA,EAAAA,UAAiB,KACpDK,EAAOC,IAAYN,EAAAA,EAAAA,UAAiB,oGACpCO,EAAQC,IAAaR,EAAAA,EAAAA,UAAiB,qCACtCS,EAASC,IAAcV,EAAAA,EAAAA,WAAS,IAChCW,EAAOC,IAAYZ,EAAAA,EAAAA,UAAwB,OAElDa,EAAAA,EAAAA,WAAU,KACRC,KACC,CAAClB,IAEJ,MAAMkB,EAAeC,UACnB,IACE,MAAMC,QAAiBC,MAAM,mBAAmBrB,qBAChD,IAAKoB,EAASE,GACZ,MAAM,IAAIC,MAAM,mCAElB,MAAMC,QAAaJ,EAASK,OAC5BtB,EAAWqB,GAGPA,EAAK3B,OAAS,GAChB6B,EAAaF,EAAK,GAEtB,CAAE,MAAOG,GACPX,EAASW,aAAeJ,MAAQI,EAAIC,QAAU,gBAChD,CAAC,QACCd,GAAW,EACb,GAGIY,EAAeP,UACnBb,EAAkBuB,GAElB,IACE,MAAMT,QAAiBC,MAAM,mBAAmBrB,eAAsB8B,mBAAmBD,EAAOE,SAChG,IAAKX,EAASE,GAAI,MAAM,IAAIC,MAAM,yBAElC,MAAMS,QAAgBZ,EAASpD,OAI/B,GAHAwC,EAAiBwB,GAGbA,EAAQC,SAAS,cAAe,CAClC,MAAMC,EAAaF,EAAQrC,MAAM,0BACjC,GAAIuC,EAAY,CACd,MAAMC,EAASD,EAAW,GACvBE,MAAM,MACNC,IAAIC,GAAQA,EAAKC,QACjBC,OAAOF,GAAQA,IAASA,EAAKG,WAAW,MACxCC,MAAM,EAAG,GAEZ,GAAIP,EAAOtC,OAAS,EAAG,CACrB,MAAM8C,EAAc,sBAAsBd,EAAOe,kBAAkBT,EAAOE,IAAIQ,IAAK,IAAAC,EAAA,MAAI,KAAwB,QAAxBA,EAAKD,EAAMT,MAAM,KAAK,UAAE,IAAAU,OAAA,EAAnBA,EAAqBP,WAAUQ,KAAK,WAChIrC,EAASiC,EACX,CACF,CACF,CACF,CAAE,MAAOhB,GAEPnB,EAAiB,+BACnB,GAwBF,OAAIK,GACKmC,EAAAA,EAAAA,KAACC,EAAAA,GAAe,CAACjF,KAAK,+BAG3B+C,GAA4B,IAAnBb,EAAQL,QAEjBmD,EAAAA,EAAAA,KAACE,EAAAA,GAAS,CAACC,SAAS,KAAIC,UACtBC,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAAAF,SAAA,EACNJ,EAAAA,EAAAA,KAACO,EAAAA,GAAE,CAACC,MAAM,YAAWJ,SAAC,2CACtBJ,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CAACD,MAAM,YAAWJ,SACpBrC,GAAS,wDAEZiC,EAAAA,EAAAA,KAAC1F,EAAAA,GAAM,CAACoG,GAAIC,EAAAA,GAAMC,GAAG,IAAGR,SAAC,yBAS/BC,EAAAA,EAAAA,MAAClH,EAAU,CAAAiH,SAAA,EACTC,EAAAA,EAAAA,MAAC1G,EAAO,CAAAyG,SAAA,EACNC,EAAAA,EAAAA,MAAChG,EAAU,CAACqG,GAAIC,EAAAA,GAAMC,GAAI,eAAe5D,IAAWoD,SAAA,EAClDJ,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CAACC,KAAM,KAAM,yBAIzBT,EAAAA,EAAAA,MAAC5F,EAAY,CAAA2F,SAAA,CAAC,YAAUlD,EAAQL,OAAO,OAEtCK,EAAQmC,IAAI,CAACR,EAAQkC,KACpBV,EAAAA,EAAAA,MAACpF,EAAU,CAETG,QAAsB,OAAdiC,QAAc,IAAdA,OAAc,EAAdA,EAAgB0B,QAASF,EAAOE,KACxCiC,QAASA,IAAMtC,EAAaG,GAAQuB,SAAA,EAEpCC,EAAAA,EAAAA,MAAChF,EAAU,CAAA+E,SAAA,EACTJ,EAAAA,EAAAA,KAACiB,EAAAA,EAAQ,CAACH,KAAM,MAChBd,EAAAA,EAAAA,KAAC1E,EAAU,CAAC4F,MAAOrC,EAAOe,KAAKQ,SAAE7D,EAAqBsC,EAAOe,YAE/DI,EAAAA,EAAAA,KAACtE,EAAU,CAACwF,MAAOrC,EAAOE,KAAKqB,SAAEvB,EAAOE,SARnCgC,IAYR1D,GAAkBE,IACjB8C,EAAAA,EAAAA,MAAClE,EAAY,CAAAiE,SAAA,EACXJ,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CAACU,OAAO,WAAWC,MAAO,CAAEC,aAAc9H,EAAAA,EAAMQ,QAAQ,IAAKqG,SAAC,qBAGnEC,EAAAA,EAAAA,MAACjE,EAAa,CAAAgE,SAAA,CAAE7C,EAAcT,UAAU,EAAG,KAAK,gBAKtDuD,EAAAA,EAAAA,MAACrG,EAAW,CAAAoG,SAAA,EACVC,EAAAA,EAAAA,MAACpG,EAAgB,CAAAmG,SAAA,EACfC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEC,EAAAA,EAAAA,MAACiB,EAAAA,GAAE,CAACF,MAAO,CAAEG,OAAQ,EAAGC,QAAS,OAAQC,WAAY,SAAUC,IAAKnI,EAAAA,EAAMQ,QAAQ,IAAKqG,SAAA,EACrFJ,EAAAA,EAAAA,KAAC2B,EAAAA,EAAI,CAACb,KAAM,KAAM,wBAGnBzD,IACC2C,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CAACD,MAAM,YAAYY,MAAO,CAAEQ,UAAWrI,EAAAA,EAAMQ,QAAQ,IAAMmH,MAAO7D,EAAeuC,KAAKQ,SACxF7D,EAAqBc,EAAeuC,YAK3CS,EAAAA,EAAAA,MAAA,OAAKe,MAAO,CAAEI,QAAS,OAAQE,IAAKnI,EAAAA,EAAMQ,QAAQ,IAAKqG,SAAA,EACrDC,EAAAA,EAAAA,MAAC/F,EAAAA,GAAM,CACLuH,QAAQ,UACRnB,GAAG,IACHoB,KAAMzE,EAAiB,mBAAmBL,eAAsB8B,mBAAmBzB,EAAe0B,sBAAwB,IAC1HgD,UAAQ,EAAA3B,SAAA,EAERJ,EAAAA,EAAAA,KAACgC,EAAAA,EAAQ,CAAClB,KAAM,KAAM,sBAGxBT,EAAAA,EAAAA,MAAC/F,EAAAA,GAAM,CACLuH,QAAQ,UACRb,QAASA,KACP,MAAMiB,EAAYC,KAAKC,UAAUD,KAAKE,MAAMF,KAAKC,UAAU5E,IAAiB,KAAM,GAClFK,EAAU,0BAA0BqE,MACpC7B,SAAA,EAEFJ,EAAAA,EAAAA,KAACqC,EAAAA,EAAG,CAACvB,KAAM,KAAM,6BAMvBT,EAAAA,EAAAA,MAACnG,EAAiB,CAAAkG,SAAA,EAChBC,EAAAA,EAAAA,MAAClG,EAAU,CAAAiG,SAAA,EACTJ,EAAAA,EAAAA,KAACsB,EAAAA,GAAE,CAACF,MAAO,CAAEC,aAAc9H,EAAAA,EAAMQ,QAAQ,IAAKqG,SAAC,kBAC/CJ,EAAAA,EAAAA,KAACnE,EAAW,CACVyG,MAAO7E,EACP8E,SAAWC,GAAM9E,EAAS8E,EAAEC,OAAOH,OACnCI,YAAY,sCAEdrC,EAAAA,EAAAA,MAAChE,EAAa,CAAA+D,SAAA,EACZC,EAAAA,EAAAA,MAAC/D,EAAU,CAAC0E,QAzHH2B,KAEnB/E,EAAU,sHAIZH,gLAM6B,OAAdJ,QAAc,IAAdA,OAAc,EAAdA,EAAgBuC,wMA6GeQ,SAAA,EAChCJ,EAAAA,EAAAA,KAAC4C,EAAAA,EAAI,CAAC9B,KAAM,KAAM,oBAGpBd,EAAAA,EAAAA,KAAC1F,EAAAA,GAAM,CACLuH,QAAQ,UACRb,QAASA,IAAMtD,EAAS,iCAAiC0C,SAC1D,WAGDJ,EAAAA,EAAAA,KAAC1F,EAAAA,GAAM,CACLuH,QAAQ,UACRb,QAASA,KACP,MAAMiB,EAAYxE,EAAM2B,MAAM,MAAMC,IAAIC,GAAQ,KAAKA,KAAQS,KAAK,MAClErC,EAAS,MAAMuE,SACf7B,SACH,kBAMLC,EAAAA,EAAAA,MAACjG,EAAW,CAAAgG,SAAA,EACVJ,EAAAA,EAAAA,KAACsB,EAAAA,GAAE,CAACF,MAAO,CAAEC,aAAc9H,EAAAA,EAAMQ,QAAQ,IAAKqG,SAAC,aAC/CJ,EAAAA,EAAAA,KAAC/D,EAAY,CAAAmE,SAAEzC,gB","sources":["components/GraphQLPlaygroundLocal.tsx","components/GraphQLPlaygroundView.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { \n  ArrowLeft,\n  Play,\n  Database,\n  FileCode,\n  Download,\n  Eye,\n  Code,\n  Settings\n} from 'lucide-react';\nimport { theme } from '../styles/design-system';\nimport {\n  Container,\n  Section,\n  H1,\n  H2,\n  Text,\n  Button,\n  FullPageLoading\n} from './styled';\n\ninterface GraphQLSchema {\n  name: string;\n  path: string;\n}\n\nconst PageLayout = styled.div`\n  display: flex;\n  height: 100vh;\n  background: ${props => props.theme.colors.background.primary};\n`;\n\nconst Sidebar = styled.div`\n  width: 320px;\n  background: ${props => props.theme.colors.background.secondary};\n  border-right: 1px solid ${props => props.theme.colors.border.light};\n  padding: ${props => props.theme.spacing[6]};\n  overflow-y: auto;\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background: ${props => props.theme.colors.background.primary};\n`;\n\nconst PlaygroundHeader = styled.div`\n  background: ${props => props.theme.colors.background.secondary};\n  padding: ${props => props.theme.spacing[6]};\n  border-bottom: 1px solid ${props => props.theme.colors.border.light};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst PlaygroundContent = styled.div`\n  flex: 1;\n  display: flex;\n`;\n\nconst QueryPanel = styled.div`\n  flex: 1;\n  padding: ${props => props.theme.spacing[4]};\n  border-right: 1px solid ${props => props.theme.colors.border.light};\n`;\n\nconst ResultPanel = styled.div`\n  flex: 1;\n  padding: ${props => props.theme.spacing[4]};\n  background: ${props => props.theme.colors.background.secondary};\n`;\n\nconst BackButton = styled(Button)`\n  margin-bottom: ${props => props.theme.spacing[6]};\n  background: transparent;\n  border: 1px solid ${props => props.theme.colors.primary.yellow};\n  color: ${props => props.theme.colors.primary.yellow};\n  \n  &:hover {\n    background: ${props => props.theme.colors.primary.yellow};\n    color: ${props => props.theme.colors.primary.black};\n  }\n`;\n\nconst SidebarTitle = styled.h2`\n  font-size: ${props => props.theme.typography.fontSize.xl};\n  font-weight: ${props => props.theme.typography.fontWeight.bold};\n  margin: 0 0 ${props => props.theme.spacing[4]} 0;\n  color: ${props => props.theme.colors.text.primary};\n`;\n\nconst SchemaItem = styled.div<{ active?: boolean }>`\n  padding: ${props => props.theme.spacing[4]};\n  margin-bottom: ${props => props.theme.spacing[2]};\n  border-radius: ${props => props.theme.borderRadius.md};\n  cursor: pointer;\n  transition: all 0.2s ease;\n  background: ${props => props.active ? theme.colors.primary.yellow : theme.colors.background.primary};\n  color: ${props => props.active ? theme.colors.primary.black : theme.colors.text.primary};\n  border: 1px solid ${props => props.active ? theme.colors.primary.yellow : theme.colors.border.light};\n  overflow: hidden;\n  \n  &:hover {\n    background: ${props => props.active ? theme.colors.primary.yellow : 'rgba(255, 230, 0, 0.1)'};\n    border-color: ${props => props.theme.colors.primary.yellow};\n    transform: translateX(2px);\n  }\n`;\n\nconst SchemaIcon = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${props => props.theme.spacing[2]};\n  margin-bottom: ${props => props.theme.spacing[2]};\n`;\n\nconst SchemaName = styled.h3`\n  font-size: ${props => props.theme.typography.fontSize.base};\n  font-weight: ${props => props.theme.typography.fontWeight.semibold};\n  margin: 0;\n  line-height: 1.3;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst SchemaPath = styled.p`\n  font-size: ${props => props.theme.typography.fontSize.sm};\n  color: ${props => props.theme.colors.text.secondary};\n  margin: 0;\n  opacity: 0.8;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst QueryEditor = styled.textarea`\n  width: 100%;\n  height: 400px;\n  padding: ${props => props.theme.spacing[4]};\n  border: 1px solid ${props => props.theme.colors.border.light};\n  border-radius: ${props => props.theme.borderRadius.md};\n  font-family: ${props => props.theme.typography.fontFamily.mono};\n  font-size: ${props => props.theme.typography.fontSize.sm};\n  background: ${props => props.theme.colors.background.primary};\n  color: ${props => props.theme.colors.text.primary};\n  resize: vertical;\n  \n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary.yellow};\n  }\n`;\n\nconst ResultViewer = styled.pre`\n  width: 100%;\n  height: 400px;\n  padding: ${props => props.theme.spacing[4]};\n  border: 1px solid ${props => props.theme.colors.border.light};\n  border-radius: ${props => props.theme.borderRadius.md};\n  font-family: ${props => props.theme.typography.fontFamily.mono};\n  font-size: ${props => props.theme.typography.fontSize.sm};\n  background: ${props => props.theme.colors.background.primary};\n  color: ${props => props.theme.colors.text.primary};\n  overflow: auto;\n  white-space: pre-wrap;\n`;\n\nconst SchemaViewer = styled.div`\n  max-height: 300px;\n  overflow-y: auto;\n  background: ${props => props.theme.colors.background.primary};\n  border: 1px solid ${props => props.theme.colors.border.light};\n  border-radius: ${props => props.theme.borderRadius.md};\n  padding: ${props => props.theme.spacing[4]};\n  margin-top: ${props => props.theme.spacing[4]};\n`;\n\nconst SchemaContent = styled.pre`\n  font-family: ${props => props.theme.typography.fontFamily.mono};\n  font-size: ${props => props.theme.typography.fontSize.sm};\n  color: ${props => props.theme.colors.text.primary};\n  white-space: pre-wrap;\n  margin: 0;\n`;\n\nconst ActionButtons = styled.div`\n  display: flex;\n  gap: ${props => props.theme.spacing[3]};\n  margin: ${props => props.theme.spacing[4]} 0;\n`;\n\nconst PlayButton = styled(Button)`\n  background: ${props => props.theme.colors.primary.yellow};\n  color: ${props => props.theme.colors.primary.black};\n  \n  &:hover {\n    background: ${props => props.theme.colors.primary.black};\n    color: ${props => props.theme.colors.primary.yellow};\n  }\n`;\n\nconst getSchemaDisplayName = (schemaName: string): string => {\n  // Remove file extension\n  const nameWithoutExt = schemaName.replace(/\\.(graphql|gql)$/i, '');\n  \n  // Convert common patterns to readable names\n  const cleaned = nameWithoutExt\n    .replace(/[-_]/g, ' ')\n    .replace(/api/gi, 'API')\n    .replace(/graphql/gi, 'GraphQL')\n    .replace(/schema/gi, 'Schema')\n    .replace(/\\b(\\w)/g, (match) => match.toUpperCase()); // Capitalize first letters\n    \n  // If still too long, truncate\n  return cleaned.length > 30 ? cleaned.substring(0, 27) + '...' : cleaned;\n};\n\nconst GraphQLPlaygroundLocal: React.FC = () => {\n  const { repoName } = useParams<{ repoName: string }>();\n  const [schemas, setSchemas] = useState<GraphQLSchema[]>([]);\n  const [selectedSchema, setSelectedSchema] = useState<GraphQLSchema | null>(null);\n  const [schemaContent, setSchemaContent] = useState<string>('');\n  const [query, setQuery] = useState<string>('# Welcome to GraphQL Playground\\n# Write your query here:\\n\\nquery {\\n  # Your GraphQL query\\n}');\n  const [result, setResult] = useState<string>('# Query results will appear here');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchSchemas();\n  }, [repoName]);\n\n  const fetchSchemas = async () => {\n    try {\n      const response = await fetch(`/api/repository/${repoName}/graphql-schemas`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch GraphQL schemas');\n      }\n      const data = await response.json();\n      setSchemas(data);\n      \n      // Auto-select first schema\n      if (data.length > 0) {\n        selectSchema(data[0]);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const selectSchema = async (schema: GraphQLSchema) => {\n    setSelectedSchema(schema);\n    \n    try {\n      const response = await fetch(`/api/repository/${repoName}/file?path=${encodeURIComponent(schema.path)}`);\n      if (!response.ok) throw new Error('Failed to load schema');\n      \n      const content = await response.text();\n      setSchemaContent(content);\n      \n      // Set a sample query based on the schema\n      if (content.includes('type Query')) {\n        const queryMatch = content.match(/type Query\\s*{([^}]*)}/);\n        if (queryMatch) {\n          const fields = queryMatch[1]\n            .split('\\n')\n            .map(line => line.trim())\n            .filter(line => line && !line.startsWith('#'))\n            .slice(0, 3); // Take first 3 fields\n          \n          if (fields.length > 0) {\n            const sampleQuery = `# Sample query for ${schema.name}\\nquery {\\n${fields.map(field => `  ${field.split(':')[0]?.trim()}`).join('\\n')}\\n}`;\n            setQuery(sampleQuery);\n          }\n        }\n      }\n    } catch (err) {\n      console.error('Error loading schema:', err);\n      setSchemaContent('Error loading schema content');\n    }\n  };\n\n  const executeQuery = () => {\n    // Since we don't have a live GraphQL endpoint, simulate execution\n    setResult(`# Query execution simulation\n# In a real implementation, this would connect to your GraphQL endpoint\n\n# Query:\n${query}\n\n# Simulated Response:\n{\n  \"data\": {\n    \"message\": \"This is a simulated response. In production, this would execute against your GraphQL endpoint.\",\n    \"schema\": \"${selectedSchema?.name}\",\n    \"status\": \"success\"\n  }\n}\n\n# Note: To run actual queries, connect this playground to your GraphQL endpoint\n# at runtime by configuring the GraphQL server URL in your environment.`);\n  };\n\n  if (loading) {\n    return <FullPageLoading text=\"Loading GraphQL schemas...\" />;\n  }\n\n  if (error || schemas.length === 0) {\n    return (\n      <Container maxWidth=\"lg\">\n        <Section>\n          <H1 color=\"secondary\">🎮 No GraphQL Schemas Found</H1>\n          <Text color=\"secondary\">\n            {error || 'This repository does not have any GraphQL schemas.'}\n          </Text>\n          <Button as={Link} to=\"/\">\n            Return to Home\n          </Button>\n        </Section>\n      </Container>\n    );\n  }\n\n  return (\n    <PageLayout>\n      <Sidebar>\n        <BackButton as={Link} to={`/repository/${repoName}`}>\n          <ArrowLeft size={20} />\n          Back to Repository\n        </BackButton>\n        \n        <SidebarTitle>Schemas ({schemas.length})</SidebarTitle>\n        \n        {schemas.map((schema, index) => (\n          <SchemaItem\n            key={index}\n            active={selectedSchema?.path === schema.path}\n            onClick={() => selectSchema(schema)}\n          >\n            <SchemaIcon>\n              <Database size={20} />\n              <SchemaName title={schema.name}>{getSchemaDisplayName(schema.name)}</SchemaName>\n            </SchemaIcon>\n            <SchemaPath title={schema.path}>{schema.path}</SchemaPath>\n          </SchemaItem>\n        ))}\n        \n        {selectedSchema && schemaContent && (\n          <SchemaViewer>\n            <Text weight=\"semibold\" style={{ marginBottom: theme.spacing[2] }}>\n              Schema Preview:\n            </Text>\n            <SchemaContent>{schemaContent.substring(0, 500)}...</SchemaContent>\n          </SchemaViewer>\n        )}\n      </Sidebar>\n\n      <MainContent>\n        <PlaygroundHeader>\n          <div>\n            <H2 style={{ margin: 0, display: 'flex', alignItems: 'center', gap: theme.spacing[2] }}>\n              <Code size={24} />\n              GraphQL Playground\n            </H2>\n            {selectedSchema && (\n              <Text color=\"secondary\" style={{ marginTop: theme.spacing[1] }} title={selectedSchema.name}>\n                {getSchemaDisplayName(selectedSchema.name)}\n              </Text>\n            )}\n          </div>\n          \n          <div style={{ display: 'flex', gap: theme.spacing[3] }}>\n            <Button\n              variant=\"outline\"\n              as=\"a\"\n              href={selectedSchema ? `/api/repository/${repoName}/file?path=${encodeURIComponent(selectedSchema.path)}&download=true` : '#'}\n              download\n            >\n              <Download size={20} />\n              Download Schema\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                const formatted = JSON.stringify(JSON.parse(JSON.stringify(schemaContent)), null, 2);\n                setResult(`# Formatted Schema:\\n\\n${formatted}`);\n              }}\n            >\n              <Eye size={20} />\n              View Full Schema\n            </Button>\n          </div>\n        </PlaygroundHeader>\n\n        <PlaygroundContent>\n          <QueryPanel>\n            <H2 style={{ marginBottom: theme.spacing[4] }}>Query Editor</H2>\n            <QueryEditor\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Enter your GraphQL query here...\"\n            />\n            <ActionButtons>\n              <PlayButton onClick={executeQuery}>\n                <Play size={20} />\n                Execute Query\n              </PlayButton>\n              <Button\n                variant=\"outline\"\n                onClick={() => setQuery('# Clear query\\nquery {\\n  \\n}')}\n              >\n                Clear\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  const formatted = query.split('\\n').map(line => `  ${line}`).join('\\n');\n                  setQuery(`{\\n${formatted}\\n}`);\n                }}\n              >\n                Format\n              </Button>\n            </ActionButtons>\n          </QueryPanel>\n\n          <ResultPanel>\n            <H2 style={{ marginBottom: theme.spacing[4] }}>Results</H2>\n            <ResultViewer>{result}</ResultViewer>\n          </ResultPanel>\n        </PlaygroundContent>\n      </MainContent>\n    </PageLayout>\n  );\n};\n\nexport default GraphQLPlaygroundLocal;","import GraphQLPlaygroundLocal from './GraphQLPlaygroundLocal';\n\nexport default GraphQLPlaygroundLocal;"],"names":["PageLayout","styled","div","props","theme","colors","background","primary","Sidebar","secondary","border","light","spacing","MainContent","PlaygroundHeader","PlaygroundContent","QueryPanel","ResultPanel","BackButton","Button","yellow","black","SidebarTitle","h2","typography","fontSize","xl","fontWeight","bold","text","SchemaItem","borderRadius","md","active","SchemaIcon","SchemaName","h3","base","semibold","SchemaPath","p","sm","QueryEditor","textarea","fontFamily","mono","ResultViewer","pre","SchemaViewer","SchemaContent","ActionButtons","PlayButton","getSchemaDisplayName","schemaName","cleaned","replace","match","toUpperCase","length","substring","GraphQLPlaygroundLocal","repoName","useParams","schemas","setSchemas","useState","selectedSchema","setSelectedSchema","schemaContent","setSchemaContent","query","setQuery","result","setResult","loading","setLoading","error","setError","useEffect","fetchSchemas","async","response","fetch","ok","Error","data","json","selectSchema","err","message","schema","encodeURIComponent","path","content","includes","queryMatch","fields","split","map","line","trim","filter","startsWith","slice","sampleQuery","name","field","_field$split$","join","_jsx","FullPageLoading","Container","maxWidth","children","_jsxs","Section","H1","color","Text","as","Link","to","ArrowLeft","size","index","onClick","Database","title","weight","style","marginBottom","H2","margin","display","alignItems","gap","Code","marginTop","variant","href","download","Download","formatted","JSON","stringify","parse","Eye","value","onChange","e","target","placeholder","executeQuery","Play"],"sourceRoot":""}