{"version":3,"file":"static/js/484.1150f3ba.chunk.js","mappings":"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","sources":["components/GrpcExplorer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useSearchParams, Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { \n  ArrowLeft,\n  Globe,\n  Play,\n  FileCode,\n  ChevronRight,\n  ChevronDown,\n  Copy,\n  Download,\n  Settings,\n  AlertCircle,\n  CheckCircle\n} from 'lucide-react';\nimport { theme } from '../styles/design-system';\nimport {\n  Container,\n  Section,\n  H1,\n  H2,\n  H3,\n  Text,\n  Button,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  Flex,\n  Badge,\n  FullPageLoading,\n  Input\n} from './styled';\n\ninterface GrpcService {\n  name: string;\n  methods: GrpcMethod[];\n  package?: string;\n}\n\ninterface GrpcMethod {\n  name: string;\n  requestType: string;\n  responseType: string;\n  requestStream: boolean;\n  responseStream: boolean;\n  description?: string;\n}\n\ninterface ProtoField {\n  name: string;\n  type: string;\n  repeated: boolean;\n  required: boolean;\n  description?: string;\n  fields?: ProtoField[];\n}\n\nconst PageContainer = styled.div`\n  display: flex;\n  height: calc(100vh - 60px);\n  background: ${props => props.theme.colors.background.primary};\n`;\n\nconst Sidebar = styled.div`\n  width: 350px;\n  background: ${props => props.theme.colors.background.secondary};\n  border-right: 1px solid ${props => props.theme.colors.border.light};\n  overflow-y: auto;\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst Header = styled.div`\n  background: ${props => props.theme.colors.background.secondary};\n  padding: ${props => props.theme.spacing[6]};\n  border-bottom: 1px solid ${props => props.theme.colors.border.light};\n`;\n\nconst Content = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: ${props => props.theme.spacing[6]};\n`;\n\nconst ServiceItem = styled.div<{ active?: boolean }>`\n  padding: ${props => props.theme.spacing[4]};\n  background: ${props => props.theme.colors.background.primary};\n  margin: ${props => props.theme.spacing[4]};\n  border-radius: ${props => props.theme.borderRadius.md};\n  cursor: pointer;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    transform: translateX(2px);\n    box-shadow: ${props => props.theme.shadows.md};\n  }\n`;\n\nconst MethodItem = styled.div<{ selected?: boolean }>`\n  padding: ${props => props.theme.spacing[3]};\n  margin-left: ${props => props.theme.spacing[6]};\n  margin-right: ${props => props.theme.spacing[4]};\n  margin-bottom: ${props => props.theme.spacing[2]};\n  background: ${props => props.selected ? theme.colors.primary.yellow : theme.colors.background.secondary};\n  color: ${props => props.selected ? theme.colors.primary.black : theme.colors.text.primary};\n  border-radius: ${props => props.theme.borderRadius.md};\n  cursor: pointer;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: ${props => props.selected ? theme.colors.primary.yellow : 'rgba(255, 230, 0, 0.1)'};\n  }\n`;\n\nconst StreamBadge = styled(Badge)`\n  background: ${props => props.theme.colors.accent.purple};\n  color: white;\n  margin-left: ${props => props.theme.spacing[2]};\n`;\n\nconst RequestEditor = styled.div`\n  margin-bottom: ${props => props.theme.spacing[6]};\n`;\n\nconst JsonEditor = styled.textarea`\n  width: 100%;\n  min-height: 300px;\n  padding: ${props => props.theme.spacing[4]};\n  background: ${props => props.theme.colors.background.secondary};\n  color: ${props => props.theme.colors.text.primary};\n  border: 1px solid ${props => props.theme.colors.border.light};\n  border-radius: ${props => props.theme.borderRadius.md};\n  font-family: ${props => props.theme.typography.fontFamily.mono};\n  font-size: ${props => props.theme.typography.fontSize.sm};\n  resize: vertical;\n  \n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary.yellow};\n  }\n`;\n\nconst ResponseViewer = styled.div`\n  background: ${props => props.theme.colors.background.secondary};\n  border: 1px solid ${props => props.theme.colors.border.light};\n  border-radius: ${props => props.theme.borderRadius.md};\n  overflow: hidden;\n`;\n\nconst ResponseHeader = styled.div`\n  padding: ${props => props.theme.spacing[3]} ${props => props.theme.spacing[4]};\n  background: ${props => props.theme.colors.background.primary};\n  border-bottom: 1px solid ${props => props.theme.colors.border.light};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst ResponseBody = styled.pre`\n  padding: ${props => props.theme.spacing[4]};\n  margin: 0;\n  overflow: auto;\n  font-family: ${props => props.theme.typography.fontFamily.mono};\n  font-size: ${props => props.theme.typography.fontSize.sm};\n  line-height: 1.5;\n  color: ${props => props.theme.colors.text.primary};\n  white-space: pre-wrap;\n  word-wrap: break-word;\n`;\n\nconst ConfigSection = styled.div`\n  margin-bottom: ${props => props.theme.spacing[6]};\n`;\n\nconst MetadataEditor = styled.div`\n  margin-top: ${props => props.theme.spacing[4]};\n`;\n\nconst MetadataRow = styled.div`\n  display: flex;\n  gap: ${props => props.theme.spacing[2]};\n  margin-bottom: ${props => props.theme.spacing[2]};\n`;\n\nconst ProtoViewer = styled(Card)`\n  margin-top: ${props => props.theme.spacing[6]};\n  background: ${props => props.theme.colors.background.primary};\n`;\n\nconst ProtoContent = styled.pre`\n  font-family: ${props => props.theme.typography.fontFamily.mono};\n  font-size: ${props => props.theme.typography.fontSize.sm};\n  color: ${props => props.theme.colors.text.primary};\n  white-space: pre-wrap;\n  margin: 0;\n`;\n\nconst FieldRow = styled.div`\n  padding: ${props => props.theme.spacing[2]} 0;\n  border-bottom: 1px solid ${props => props.theme.colors.border.light};\n  \n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst FieldType = styled.span`\n  color: ${props => props.theme.colors.accent.blue};\n  font-family: ${props => props.theme.typography.fontFamily.mono};\n  font-size: ${props => props.theme.typography.fontSize.sm};\n`;\n\nconst GrpcExplorer: React.FC = () => {\n  const { repoName } = useParams<{ repoName: string }>();\n  const [searchParams] = useSearchParams();\n  const protoPath = searchParams.get('proto');\n  \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [services, setServices] = useState<GrpcService[]>([]);\n  const [selectedMethod, setSelectedMethod] = useState<{ service: GrpcService; method: GrpcMethod } | null>(null);\n  const [expandedServices, setExpandedServices] = useState<Set<string>>(new Set());\n  \n  // Request state\n  const [endpoint, setEndpoint] = useState('localhost:50051');\n  const [metadata, setMetadata] = useState<Record<string, string>>({\n    'authorization': 'Bearer token'\n  });\n  const [requestBody, setRequestBody] = useState('{}');\n  const [response, setResponse] = useState<any>(null);\n  const [executing, setExecuting] = useState(false);\n  \n  // Proto content\n  const [protoContent, setProtoContent] = useState<string>('');\n  const [showProto, setShowProto] = useState(false);\n\n  useEffect(() => {\n    loadProtoFile();\n  }, [repoName, protoPath]);\n\n  const loadProtoFile = async () => {\n    try {\n      if (protoPath) {\n        const response = await fetch(`/api/repository/${repoName}/file?path=${encodeURIComponent(protoPath)}`);\n        if (!response.ok) throw new Error('Failed to load proto file');\n        \n        const content = await response.text();\n        setProtoContent(content);\n        \n        // Parse proto file to extract services and methods\n        const parsedServices = parseProtoFile(content);\n        setServices(parsedServices);\n        \n        // Auto-expand first service\n        if (parsedServices.length > 0) {\n          setExpandedServices(new Set([parsedServices[0].name]));\n        }\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const parseProtoFile = (content: string): GrpcService[] => {\n    const services: GrpcService[] = [];\n    \n    // Extract package name\n    const packageMatch = content.match(/package\\s+([\\w.]+);/);\n    const packageName = packageMatch ? packageMatch[1] : undefined;\n    \n    // Extract services\n    const serviceRegex = /service\\s+(\\w+)\\s*{([^}]*)}/g;\n    let serviceMatch;\n    \n    while ((serviceMatch = serviceRegex.exec(content)) !== null) {\n      const serviceName = serviceMatch[1];\n      const serviceBody = serviceMatch[2];\n      \n      // Extract methods from service\n      const methods: GrpcMethod[] = [];\n      const methodRegex = /rpc\\s+(\\w+)\\s*\\(\\s*(stream\\s+)?(\\w+)\\s*\\)\\s*returns\\s*\\(\\s*(stream\\s+)?(\\w+)\\s*\\)/g;\n      let methodMatch;\n      \n      while ((methodMatch = methodRegex.exec(serviceBody)) !== null) {\n        methods.push({\n          name: methodMatch[1],\n          requestType: methodMatch[3],\n          responseType: methodMatch[5],\n          requestStream: !!methodMatch[2],\n          responseStream: !!methodMatch[4]\n        });\n      }\n      \n      services.push({\n        name: serviceName,\n        methods,\n        package: packageName\n      });\n    }\n    \n    return services;\n  };\n\n  const toggleService = (serviceName: string) => {\n    const newExpanded = new Set(expandedServices);\n    if (newExpanded.has(serviceName)) {\n      newExpanded.delete(serviceName);\n    } else {\n      newExpanded.add(serviceName);\n    }\n    setExpandedServices(newExpanded);\n  };\n\n  const selectMethod = (service: GrpcService, method: GrpcMethod) => {\n    setSelectedMethod({ service, method });\n    \n    // Generate sample request based on method\n    const sampleRequest = generateSampleRequest(method.requestType);\n    setRequestBody(JSON.stringify(sampleRequest, null, 2));\n  };\n\n  const generateSampleRequest = (typeName: string): any => {\n    // Generate a sample request based on common patterns\n    const commonTypes: Record<string, any> = {\n      'GetRequest': { id: '123' },\n      'ListRequest': { page: 1, pageSize: 10 },\n      'CreateRequest': { name: 'Example', description: 'Sample data' },\n      'UpdateRequest': { id: '123', name: 'Updated' },\n      'DeleteRequest': { id: '123' }\n    };\n    \n    return commonTypes[typeName] || { \n      field1: 'value1',\n      field2: 123,\n      field3: true\n    };\n  };\n\n  const executeRequest = async () => {\n    if (!selectedMethod) return;\n    \n    setExecuting(true);\n    const startTime = Date.now();\n    \n    try {\n      // Parse request body\n      const requestData = JSON.parse(requestBody);\n      \n      // For demo purposes, simulate a gRPC response\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const mockResponse = {\n        success: true,\n        data: {\n          message: `Response from ${selectedMethod.method.name}`,\n          timestamp: new Date().toISOString(),\n          request: requestData,\n          metadata: {\n            service: selectedMethod.service.name,\n            method: selectedMethod.method.name,\n            endpoint: endpoint\n          }\n        },\n        duration: Date.now() - startTime\n      };\n      \n      setResponse(mockResponse);\n    } catch (err) {\n      setResponse({\n        error: err instanceof Error ? err.message : 'Request failed',\n        code: 'INTERNAL',\n        details: 'Failed to execute gRPC request'\n      });\n    } finally {\n      setExecuting(false);\n    }\n  };\n\n  const generateCodeSnippet = (language: string): string => {\n    if (!selectedMethod) return '';\n    \n    const { service, method } = selectedMethod;\n    \n    switch (language) {\n      case 'node':\n        return `const grpc = require('@grpc/grpc-js');\nconst protoLoader = require('@grpc/proto-loader');\n\n// Load proto file\nconst packageDefinition = protoLoader.loadSync('path/to/your.proto');\nconst proto = grpc.loadPackageDefinition(packageDefinition);\n\n// Create client\nconst client = new proto.${service.package || 'package'}.${service.name}(\n  '${endpoint}',\n  grpc.credentials.createInsecure()\n);\n\n// Make request\nconst request = ${requestBody};\n\nclient.${method.name}(request, (error, response) => {\n  if (error) {\n    console.error('Error:', error);\n  } else {\n    console.log('Response:', response);\n  }\n});`;\n\n      case 'python':\n        return `import grpc\nimport your_pb2\nimport your_pb2_grpc\n\n# Create channel and stub\nchannel = grpc.insecure_channel('${endpoint}')\nstub = your_pb2_grpc.${service.name}Stub(channel)\n\n# Create request\nrequest = your_pb2.${method.requestType}(\n${requestBody.split('\\n').map(line => '    ' + line).join('\\n')}\n)\n\n# Make request\ntry:\n    response = stub.${method.name}(request)\n    print(f\"Response: {response}\")\nexcept grpc.RpcError as e:\n    print(f\"Error: {e.code()}: {e.details()}\")`;\n\n      case 'go':\n        return `package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"google.golang.org/grpc\"\n    pb \"path/to/your/proto\"\n)\n\nfunc main() {\n    // Create connection\n    conn, err := grpc.Dial(\"${endpoint}\", grpc.WithInsecure())\n    if err != nil {\n        log.Fatalf(\"Failed to connect: %v\", err)\n    }\n    defer conn.Close()\n    \n    // Create client\n    client := pb.New${service.name}Client(conn)\n    \n    // Create request\n    request := &pb.${method.requestType}{\n        // Fill in request fields\n    }\n    \n    // Make request\n    response, err := client.${method.name}(context.Background(), request)\n    if err != nil {\n        log.Fatalf(\"Request failed: %v\", err)\n    }\n    \n    log.Printf(\"Response: %v\", response)\n}`;\n\n      default:\n        return '';\n    }\n  };\n\n  if (loading) {\n    return <FullPageLoading text=\"Loading gRPC definitions...\" />;\n  }\n\n  if (error || services.length === 0) {\n    return (\n      <Container maxWidth=\"lg\">\n        <Section>\n          <H1 color=\"secondary\">\n            <AlertCircle size={32} style={{ marginRight: theme.spacing[2] }} />\n            No gRPC Services Found\n          </H1>\n          <Text color=\"secondary\">\n            {error || 'No proto files found in this repository.'}\n          </Text>\n          <Button as={Link} to={`/api-explorer/${repoName}`}>\n            Back to API Explorer\n          </Button>\n        </Section>\n      </Container>\n    );\n  }\n\n  return (\n    <PageContainer>\n      <Sidebar>\n        <div style={{ padding: theme.spacing[4] }}>\n          <Button\n            as={Link}\n            to={`/api-explorer/${repoName}`}\n            variant=\"outline\"\n            size=\"sm\"\n            style={{ marginBottom: theme.spacing[4] }}\n          >\n            <ArrowLeft size={20} />\n            Back to Explorer\n          </Button>\n          \n          <H2 style={{ marginBottom: theme.spacing[4] }}>\n            <Globe size={24} style={{ marginRight: theme.spacing[2] }} />\n            gRPC Services\n          </H2>\n        </div>\n        \n        {services.map(service => (\n          <div key={service.name}>\n            <ServiceItem onClick={() => toggleService(service.name)}>\n              <Flex align=\"center\" justify=\"between\">\n                <div>\n                  <Text weight=\"semibold\">{service.name}</Text>\n                  <Text size=\"small\" color=\"secondary\">\n                    {service.methods.length} methods\n                  </Text>\n                </div>\n                {expandedServices.has(service.name) ? (\n                  <ChevronDown size={20} />\n                ) : (\n                  <ChevronRight size={20} />\n                )}\n              </Flex>\n            </ServiceItem>\n            \n            {expandedServices.has(service.name) && (\n              <div>\n                {service.methods.map(method => (\n                  <MethodItem\n                    key={method.name}\n                    selected={selectedMethod?.method.name === method.name}\n                    onClick={() => selectMethod(service, method)}\n                  >\n                    <Flex align=\"center\" justify=\"between\">\n                      <Text weight=\"medium\">{method.name}</Text>\n                      <div>\n                        {method.requestStream && <StreamBadge size=\"sm\">stream</StreamBadge>}\n                        {method.responseStream && <StreamBadge size=\"sm\">stream</StreamBadge>}\n                      </div>\n                    </Flex>\n                    <Text size=\"small\" color=\"secondary\">\n                      {method.requestType} → {method.responseType}\n                    </Text>\n                  </MethodItem>\n                ))}\n              </div>\n            )}\n          </div>\n        ))}\n      </Sidebar>\n\n      <MainContent>\n        <Header>\n          <Flex align=\"center\" justify=\"between\">\n            <div>\n              <H2 style={{ margin: 0 }}>\n                {selectedMethod ? selectedMethod.method.name : 'Select a method'}\n              </H2>\n              {selectedMethod && (\n                <Text color=\"secondary\" style={{ marginTop: theme.spacing[1] }}>\n                  {selectedMethod.service.name} Service\n                </Text>\n              )}\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              onClick={() => setShowProto(!showProto)}\n            >\n              <FileCode size={20} />\n              {showProto ? 'Hide' : 'View'} Proto\n            </Button>\n          </Flex>\n        </Header>\n\n        <Content>\n          {selectedMethod ? (\n            <>\n              <ConfigSection>\n                <H3>Connection</H3>\n                <Flex gap={3} style={{ marginBottom: theme.spacing[4] }}>\n                  <Input\n                    type=\"text\"\n                    value={endpoint}\n                    onChange={(e) => setEndpoint(e.target.value)}\n                    placeholder=\"localhost:50051\"\n                    style={{ flex: 1 }}\n                  />\n                  <Button variant=\"outline\">\n                    <Settings size={20} />\n                    TLS Config\n                  </Button>\n                </Flex>\n\n                <MetadataEditor>\n                  <Text weight=\"semibold\" style={{ marginBottom: theme.spacing[2] }}>\n                    Metadata\n                  </Text>\n                  {Object.entries(metadata).map(([key, value], index) => (\n                    <MetadataRow key={index}>\n                      <Input\n                        type=\"text\"\n                        value={key}\n                        placeholder=\"Key\"\n                        onChange={(e) => {\n                          const newMetadata = { ...metadata };\n                          delete newMetadata[key];\n                          newMetadata[e.target.value] = value;\n                          setMetadata(newMetadata);\n                        }}\n                      />\n                      <Input\n                        type=\"text\"\n                        value={value}\n                        placeholder=\"Value\"\n                        onChange={(e) => {\n                          setMetadata({ ...metadata, [key]: e.target.value });\n                        }}\n                      />\n                    </MetadataRow>\n                  ))}\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => setMetadata({ ...metadata, '': '' })}\n                  >\n                    Add Metadata\n                  </Button>\n                </MetadataEditor>\n              </ConfigSection>\n\n              <RequestEditor>\n                <Flex align=\"center\" justify=\"between\" style={{ marginBottom: theme.spacing[2] }}>\n                  <H3>Request ({selectedMethod.method.requestType})</H3>\n                  <Flex gap={2}>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        const formatted = JSON.stringify(JSON.parse(requestBody), null, 2);\n                        setRequestBody(formatted);\n                      }}\n                    >\n                      Format\n                    </Button>\n                    <Button\n                      onClick={executeRequest}\n                      disabled={executing}\n                    >\n                      {executing ? 'Executing...' : (\n                        <>\n                          <Play size={20} />\n                          Execute\n                        </>\n                      )}\n                    </Button>\n                  </Flex>\n                </Flex>\n                <JsonEditor\n                  value={requestBody}\n                  onChange={(e) => setRequestBody(e.target.value)}\n                  placeholder=\"Enter request JSON...\"\n                />\n              </RequestEditor>\n\n              {response && (\n                <ResponseViewer>\n                  <ResponseHeader>\n                    <Flex align=\"center\" gap={3}>\n                      <Text weight=\"semibold\">Response</Text>\n                      {response.success ? (\n                        <Badge variant=\"success\">Success</Badge>\n                      ) : (\n                        <Badge variant=\"danger\">Error</Badge>\n                      )}\n                      {response.duration && (\n                        <Text size=\"small\" color=\"secondary\">\n                          {response.duration}ms\n                        </Text>\n                      )}\n                    </Flex>\n                    <Flex gap={2}>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          navigator.clipboard.writeText(JSON.stringify(response, null, 2));\n                        }}\n                      >\n                        <Copy size={16} />\n                        Copy\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          const blob = new Blob([JSON.stringify(response, null, 2)], { type: 'application/json' });\n                          const url = URL.createObjectURL(blob);\n                          const a = document.createElement('a');\n                          a.href = url;\n                          a.download = `${selectedMethod.method.name}-response.json`;\n                          a.click();\n                        }}\n                      >\n                        <Download size={16} />\n                        Download\n                      </Button>\n                    </Flex>\n                  </ResponseHeader>\n                  <ResponseBody>\n                    {JSON.stringify(response.data || response.error, null, 2)}\n                  </ResponseBody>\n                </ResponseViewer>\n              )}\n\n              <div style={{ marginTop: theme.spacing[6] }}>\n                <H3>Code Examples</H3>\n                <Flex gap={2} style={{ marginBottom: theme.spacing[3] }}>\n                  {['node', 'python', 'go'].map(lang => (\n                    <Button\n                      key={lang}\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        const code = generateCodeSnippet(lang);\n                        navigator.clipboard.writeText(code);\n                      }}\n                    >\n                      <Copy size={16} />\n                      {lang.charAt(0).toUpperCase() + lang.slice(1)}\n                    </Button>\n                  ))}\n                </Flex>\n              </div>\n            </>\n          ) : (\n            <div style={{ textAlign: 'center', padding: theme.spacing[16] }}>\n              <Globe size={64} color={theme.colors.text.secondary} />\n              <H2 color=\"secondary\" style={{ marginTop: theme.spacing[4] }}>\n                Select a gRPC Method\n              </H2>\n              <Text color=\"secondary\">\n                Choose a service and method from the sidebar to start testing\n              </Text>\n            </div>\n          )}\n\n          {showProto && protoContent && (\n            <ProtoViewer>\n              <CardHeader>\n                <CardTitle>Proto Definition</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ProtoContent>{protoContent}</ProtoContent>\n              </CardContent>\n            </ProtoViewer>\n          )}\n        </Content>\n      </MainContent>\n    </PageContainer>\n  );\n};\n\nexport default GrpcExplorer;"],"names":["PageContainer","styled","div","props","theme","colors","background","primary","Sidebar","secondary","border","light","MainContent","Header","spacing","Content","ServiceItem","borderRadius","md","shadows","MethodItem","selected","yellow","black","text","StreamBadge","Badge","accent","purple","RequestEditor","JsonEditor","textarea","typography","fontFamily","mono","fontSize","sm","ResponseViewer","ResponseHeader","ResponseBody","pre","ConfigSection","MetadataEditor","MetadataRow","ProtoViewer","Card","ProtoContent","span","blue","GrpcExplorer","repoName","useParams","searchParams","useSearchParams","protoPath","get","loading","setLoading","useState","error","setError","services","setServices","selectedMethod","setSelectedMethod","expandedServices","setExpandedServices","Set","endpoint","setEndpoint","metadata","setMetadata","requestBody","setRequestBody","response","setResponse","executing","setExecuting","protoContent","setProtoContent","showProto","setShowProto","useEffect","loadProtoFile","async","fetch","encodeURIComponent","ok","Error","content","parsedServices","parseProtoFile","length","name","err","message","packageMatch","match","packageName","undefined","serviceRegex","serviceMatch","exec","serviceName","serviceBody","methods","methodRegex","methodMatch","push","requestType","responseType","requestStream","responseStream","package","generateSampleRequest","typeName","id","page","pageSize","description","field1","field2","field3","_jsx","FullPageLoading","Container","maxWidth","children","_jsxs","Section","H1","color","AlertCircle","size","style","marginRight","Text","Button","as","Link","to","padding","variant","marginBottom","ArrowLeft","H2","Globe","map","service","onClick","newExpanded","has","delete","add","toggleService","Flex","align","justify","weight","ChevronDown","ChevronRight","method","selectMethod","sampleRequest","JSON","stringify","margin","marginTop","FileCode","_Fragment","H3","gap","Input","type","value","onChange","e","target","placeholder","flex","Settings","Object","entries","_ref","index","key","newMetadata","formatted","parse","startTime","Date","now","requestData","Promise","resolve","setTimeout","mockResponse","success","data","timestamp","toISOString","request","duration","code","details","disabled","Play","navigator","clipboard","writeText","Copy","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","click","Download","lang","language","split","line","join","generateCodeSnippet","charAt","toUpperCase","slice","textAlign","CardHeader","CardTitle","CardContent"],"sourceRoot":""}